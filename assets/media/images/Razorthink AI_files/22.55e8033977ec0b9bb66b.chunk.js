(this["webpackJsonp"] = this["webpackJsonp"] || []).push([[22],{

/***/ "./apps/Model/src/pages/ModelPage/pages/ModelDesigner/ModelDesigner.utils.js":
/*!***********************************************************************************!*\
  !*** ./apps/Model/src/pages/ModelPage/pages/ModelDesigner/ModelDesigner.utils.js ***!
  \***********************************************************************************/
/*! exports provided: normaliseLeftPaneJson, getTransformedModelTemplate, JsonEditorFooter, extractErrors, checkError, checkSlotsErrors, getItemY1, getItemX1, getItemY0, getNewSharedGroupBlockStateReducer, getNewStackPosition, getNewGroupPosition, getMovedStackPositionAndDeltas, getTransformedIOChild, getSingleIOOnAddChild, identifyDuplicateNames, getValueFromBlueprint, getValueFromRepeatableBlueprint, getValueFromRepeatableBlueprintOnLoad, createNewRepeatableKey, getProperty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normaliseLeftPaneJson\", function() { return normaliseLeftPaneJson; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTransformedModelTemplate\", function() { return getTransformedModelTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonEditorFooter\", function() { return JsonEditorFooter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extractErrors\", function() { return extractErrors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkError\", function() { return checkError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkSlotsErrors\", function() { return checkSlotsErrors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getItemY1\", function() { return getItemY1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getItemX1\", function() { return getItemX1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getItemY0\", function() { return getItemY0; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getNewSharedGroupBlockStateReducer\", function() { return getNewSharedGroupBlockStateReducer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getNewStackPosition\", function() { return getNewStackPosition; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getNewGroupPosition\", function() { return getNewGroupPosition; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMovedStackPositionAndDeltas\", function() { return getMovedStackPositionAndDeltas; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTransformedIOChild\", function() { return getTransformedIOChild; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSingleIOOnAddChild\", function() { return getSingleIOOnAddChild; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identifyDuplicateNames\", function() { return identifyDuplicateNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getValueFromBlueprint\", function() { return getValueFromBlueprint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getValueFromRepeatableBlueprint\", function() { return getValueFromRepeatableBlueprint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getValueFromRepeatableBlueprintOnLoad\", function() { return getValueFromRepeatableBlueprintOnLoad; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNewRepeatableKey\", function() { return createNewRepeatableKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getProperty\", function() { return getProperty; });\n/* harmony import */ var _commons_src_index_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../../commons/src/index.components */ \"./commons/src/index.components.js\");\n/* harmony import */ var _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../commons/src/index.constants */ \"./commons/src/index.constants.js\");\n/* harmony import */ var _commons_src_index_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../commons/src/index.utils */ \"./commons/src/index.utils.js\");\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! immutable */ \"./node_modules/immutable/dist/immutable.js\");\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(immutable__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _ModelRunner_pages_ModelRunnerDesigner_ModelRunnerDesigner_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ModelRunner/pages/ModelRunnerDesigner/ModelRunnerDesigner.constants */ \"./apps/Model/src/pages/ModelPage/pages/ModelRunner/pages/ModelRunnerDesigner/ModelRunnerDesigner.constants.js\");\n/* harmony import */ var _ModelDesigner_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ModelDesigner.constants */ \"./apps/Model/src/pages/ModelPage/pages/ModelDesigner/ModelDesigner.constants.js\");\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\nvar getEditableValue = function getEditableValue(_ref) {\n  var loggedInUser = _ref.loggedInUser,\n      i = _ref.i;\n\n  if ([_commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].STACK, _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].GROUP].includes(i.type)) {\n    return loggedInUser.get('userId') === i.created_by.id;\n  }\n\n  if (i.customCreatedItem) {\n    return i.intellectual_property ? loggedInUser.get('userId') === i.created_by.id : true;\n  }\n\n  return false;\n};\n\nvar normaliseLeftPaneJson = function normaliseLeftPaneJson(_ref2) {\n  var data = _ref2.data,\n      _ref2$groupName = _ref2.groupName,\n      groupName = _ref2$groupName === void 0 ? 'group_name' : _ref2$groupName,\n      isRunner = _ref2.isRunner,\n      loggedInUser = _ref2.loggedInUser;\n  var nodePaths = {};\n  var MODEL_OUTPUTTING_FLOWS = {};\n  var RESET_FLOWS = {};\n  var listData = data.map(function (_ref3, index) {\n    var items = _ref3.items,\n        customItems = _ref3.customItems,\n        rest = _objectWithoutProperties(_ref3, [\"items\", \"customItems\"]);\n\n    var newItems = items.concat((customItems || []).map(function (iItem) {\n      return _objectSpread({}, iItem, {\n        customCreatedItem: true\n      });\n    })).map(function (i) {\n      var node = _objectSpread({\n        editable: getEditableValue({\n          loggedInUser: loggedInUser,\n          i: i\n        }),\n        type: rest.type\n      }, i, {\n        grandParentLabel: rest.label\n      });\n\n      if (isRunner) {\n        // eslint-disable-next-line max-len\n        if (node.outputs.some(function (output) {\n          return output.output_type.data_type === _ModelRunner_pages_ModelRunnerDesigner_ModelRunnerDesigner_constants__WEBPACK_IMPORTED_MODULE_7__[\"IODataTypes\"].MODEL;\n        })) {\n          MODEL_OUTPUTTING_FLOWS[node.component_id] = {\n            internal_name: node.internal_name\n          };\n        }\n\n        if (node.inputs.some(function (input) {\n          return input.input_type.data_type === _ModelRunner_pages_ModelRunnerDesigner_ModelRunnerDesigner_constants__WEBPACK_IMPORTED_MODULE_7__[\"IODataTypes\"].MODEL && input.input_type.selection_type === _ModelRunner_pages_ModelRunnerDesigner_ModelRunnerDesigner_constants__WEBPACK_IMPORTED_MODULE_7__[\"inputSelectionTypes\"].HISTORICAL;\n        })) {\n          RESET_FLOWS[node.component_id] = true;\n        }\n      }\n\n      return node;\n    });\n\n    var initialGrouped = _.groupBy(newItems, function (i) {\n      return i[groupName] || '__ungrouped__';\n    });\n\n    var __ungrouped__ = initialGrouped.__ungrouped__,\n        grouped = _objectWithoutProperties(initialGrouped, [\"__ungrouped__\"]);\n\n    var newGrouped = _.reduce(grouped, function (acc, item, key) {\n      return _objectSpread({}, acc, _defineProperty({}, key, {\n        isGroup: true,\n        id: key,\n        name: key,\n        type: rest.type,\n        items: item.reduce(function (a, i) {\n          nodePaths[i.component_id] = [index, 'items', key, 'items', i.component_id];\n          return _objectSpread({}, a, _defineProperty({}, i.component_id, _objectSpread({}, i, {\n            isGroup: true,\n            inputCount: (i.inputs || []).reduce(function (iPrev, iNext) {\n              if (iNext.minimum_inputs) {\n                iPrev += iNext.minimum_inputs;\n              } else if (!iNext.optional) {\n                iPrev += 1;\n              }\n\n              return iPrev;\n            }, 0),\n            outputCount: (i.outputs || []).reduce(function (iPrev, iNext) {\n              if (iNext.minimum_outputs) {\n                iPrev += iNext.minimum_outputs;\n              } else if (!iNext.optional) {\n                iPrev += 1;\n              }\n\n              return iPrev;\n            }, 0)\n          })));\n        }, {})\n      }));\n    }, {});\n\n    var ungrouped = _.reduce(__ungrouped__, function (acc, item) {\n      nodePaths[item.component_id] = [index, 'items', item.component_id];\n      return _objectSpread({}, acc, _defineProperty({}, item.component_id, _objectSpread({}, item, {\n        isGroup: false,\n        inputCount: (item.inputs || []).reduce(function (iPrev, iNext) {\n          if (iNext.minimum_inputs) {\n            iPrev += iNext.minimum_inputs;\n          } else if (!iNext.optional) {\n            iPrev += 1;\n          }\n\n          return iPrev;\n        }, 0),\n        outputCount: (item.outputs || []).reduce(function (iPrev, iNext) {\n          if (iNext.minimum_outputs) {\n            iPrev += iNext.minimum_outputs;\n          } else if (!iNext.optional) {\n            iPrev += 1;\n          }\n\n          return iPrev;\n        }, 0)\n      })));\n    }, {});\n\n    return _objectSpread({}, rest, {\n      items: _objectSpread({}, newGrouped, ungrouped)\n    });\n  });\n  var runnerKeys = isRunner ? {\n    MODEL_OUTPUTTING_FLOWS: MODEL_OUTPUTTING_FLOWS,\n    RESET_FLOWS: RESET_FLOWS\n  } : {};\n  return _objectSpread({\n    nodes: listData,\n    nodePaths: nodePaths\n  }, runnerKeys);\n};\n\nvar mapIOBlock = function mapIOBlock(inputs) {\n  if (!inputs) return Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({});\n  var inp = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({});\n  var order = 0;\n  inputs.forEach(function (input, k) {\n    inp = inp.mergeIn([k], input);\n    inp = inp.setIn([k, 'id'], k);\n    inp = inp.setIn([k, 'order'], input.getIn(['ui_param', 'order']) || (order += 1));\n    inp = inp.setIn([k, 'label'], input.getIn(['ui_param', 'label']));\n    inp = inp.deleteIn([k, 'ui_param']);\n  });\n  return inp;\n};\n\nvar getTransformedModelTemplate = function getTransformedModelTemplate(_ref4) {\n  var template = _ref4.template,\n      validationResponse = _ref4.validationResponse;\n  var Blocks = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({});\n  var Operators = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({});\n  var Stacks = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({});\n  var Validation = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({});\n  var Errors = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([]);\n  var rejectBlocks = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([]);\n  var rejectStackIDs = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([]);\n  var rejectConnections = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([]);\n  var hasEntities = false;\n  (template.get('groups') || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({})).forEach(function (iGroup, iGroupKey) {\n    hasEntities = true;\n\n    if (iGroup.get('block_ids')) {\n      rejectBlocks = rejectBlocks.concat(iGroup.get('block_ids').map(function (iItem) {\n        return Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n          id: iItem,\n          groupID: iGroupKey\n        });\n      }));\n    }\n\n    if (iGroup.get('connection_ids')) {\n      rejectConnections = rejectConnections.concat(iGroup.get('connection_ids'));\n    }\n\n    if (iGroup.get('stack_ids')) {\n      iGroup.get('stack_ids').forEach(function (iStackID) {\n        rejectStackIDs = rejectStackIDs.push(iStackID);\n        rejectBlocks = rejectBlocks.concat(template.getIn(['stacks', iStackID, 'blocks']).map(function (iItem) {\n          return Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n            id: iItem,\n            groupID: iGroupKey\n          });\n        }));\n        rejectConnections = rejectConnections.concat(template.getIn(['stacks', iStackID, 'connections']));\n      });\n    }\n  });\n  (template.get('blocks') || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({})).merge((template.get('groups') || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({})).reduce(function (prev, next) {\n    hasEntities = true;\n\n    if (next.get('shared')) {\n      next.getIn(['sharedComponentDetail', 'shareDetail']).forEach(function (iItem) {\n        prev = prev.set(iItem.get('id'), iItem.merge(Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n          type: _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].GROUP,\n          shared: true,\n          parentGroupID: next.get('id'),\n          description: next.get('description'),\n          inputs: next.get('inputs'),\n          outputs: next.get('outputs'),\n          component_id: next.get('component_id'),\n          scopes: next.get('scopes')\n        })));\n      });\n    } else {\n      prev = prev.set(next.get('id'), next.set('type', _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].GROUP));\n    }\n\n    return prev;\n  }, Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({}))).filter(function (block, key) {\n    return !rejectBlocks.some(function (iItem) {\n      return iItem.get('id') === key;\n    });\n  }).forEach(function (block, key) {\n    var newblock = block.set('id', key);\n\n    if (newblock.get('type') === _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].GROUP) {\n      newblock = newblock.update('inputs', function (inputs) {\n        return inputs.reduce(function (prev, next) {\n          var blockDetails = template.getIn(['blocks', next.get('blockId')]);\n          return prev.set(next.get('id'), Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n            id: next.get('id'),\n            otherProperties: next.set('type', _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].GROUP),\n            label: \"\".concat(blockDetails.get('name'), \"::\").concat(blockDetails.getIn(['inputs', next.get('id'), 'ui_param', 'label']))\n          }));\n        }, Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({}));\n      }).update('outputs', function (outputs) {\n        return outputs.reduce(function (prev, next) {\n          var blockDetails = template.getIn(['blocks', next.get('blockId')]);\n          return prev.set(next.get('id'), Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n            id: next.get('id'),\n            otherProperties: next.set('type', _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].GROUP),\n            label: \"\".concat(blockDetails.get('name'), \"::\").concat(blockDetails.getIn(['outputs', next.get('id'), 'ui_param', 'label']))\n          }));\n        }, Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({}));\n      }).set('color', _ModelDesigner_constants__WEBPACK_IMPORTED_MODULE_8__[\"GROUP_DRAGGABLE_ITEM_COLOR\"]);\n    } else {\n      newblock = newblock.update('inputs', mapIOBlock);\n      newblock = newblock.update('outputs', mapIOBlock);\n      newblock = newblock.set('color', Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])(newblock.getIn(['ui_param', 'color'])));\n    }\n\n    newblock = newblock.set('position', Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])(newblock.getIn(['ui_param', 'position'])));\n    newblock = newblock.set('group_name', Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])(newblock.getIn(['ui_param', 'group_name'])));\n    newblock = newblock.set('description', Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])(newblock.getIn(['ui_param', 'description'])));\n    newblock = newblock.delete('ui_param');\n\n    if (String(newblock.get('type')).toUpperCase() !== 'OPERATOR') {\n      Blocks = Blocks.set(key, newblock);\n    } else {\n      newblock = newblock.set('icon', \"operator-\".concat(newblock.get('internal_name').toLowerCase().replace('operator', '')));\n      Operators = Operators.set(key, newblock);\n    }\n  });\n  (template.get('stacks') || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({})).filter(function (Stack, key) {\n    return !rejectStackIDs.includes(key);\n  }).forEach(function (Stack, key) {\n    hasEntities = true;\n    var stack = Stack.merge({\n      id: key,\n      orientationType: Stack.get('type'),\n      type: _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].STACK,\n      position: Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])(Stack.getIn(['ui_param', 'position']))\n    }).delete('ui_param');\n    Stacks = Stacks.set(key, stack);\n    stack.get('blocks').forEach(function (blockID) {\n      if (Blocks.has(blockID)) {\n        Blocks = Blocks.setIn([blockID, 'stackID'], key);\n      } else {\n        Operators = Operators.setIn([blockID, 'stackID'], key);\n      }\n    });\n  });\n  Validation = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])(validationResponse || {});\n  var updatedComponents = Validation.get('updatedComponents') || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([]);\n  var deletedComponents = Validation.get('deletedComponents') || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([]);\n  updatedComponents.forEach(function (iUpdatedComponent) {\n    var itemKey = iUpdatedComponent.get('componentId');\n    var modifiedBy = iUpdatedComponent.get('modifiedBy');\n    var modifiedOn = iUpdatedComponent.get('modifiedOn');\n\n    if (Blocks.has(itemKey)) {\n      Blocks = Blocks.mergeIn([itemKey], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n        isUpdated: true,\n        markModified: true,\n        modifiedBy: modifiedBy,\n        modifiedOn: modifiedOn\n      }));\n    } else if (Operators.has(itemKey)) {\n      Operators = Operators.mergeIn([itemKey], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n        isUpdated: true,\n        markModified: true,\n        modifiedBy: modifiedBy,\n        modifiedOn: modifiedOn\n      }));\n    } else if (Stacks.has(itemKey)) {\n      Stacks = Stacks.mergeIn([itemKey], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n        isUpdated: true,\n        markModified: true,\n        modifiedBy: modifiedBy,\n        modifiedOn: modifiedOn\n      }));\n      Blocks.filter(function (iItem) {\n        return iItem.get('stackID') === itemKey;\n      }).forEach(function (iItem, key) {\n        Blocks = Blocks.mergeIn([key], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n          isUpdated: true,\n          markModified: true,\n          modifiedBy: modifiedBy,\n          modifiedOn: modifiedOn\n        }));\n      });\n      Operators.filter(function (iItem) {\n        return iItem.get('stackID') === itemKey;\n      }).forEach(function (iItem, key) {\n        Operators = Operators.mergeIn([key], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n          isUpdated: true,\n          markModified: true,\n          modifiedBy: modifiedBy,\n          modifiedOn: modifiedOn\n        }));\n      });\n    }\n\n    if (template.getIn(['groups', itemKey, 'shared'])) {\n      Blocks.filter(function (iItem) {\n        return iItem.get('parentGroupID') === itemKey;\n      }).forEach(function (iItem, key) {\n        Blocks = Blocks.mergeIn([key], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n          isUpdated: true,\n          markModified: true,\n          modifiedBy: modifiedBy,\n          modifiedOn: modifiedOn\n        }));\n      });\n    }\n  });\n  deletedComponents.forEach(function (iDeletedComponent) {\n    var itemKey = iDeletedComponent.get('componentId');\n    var deletedBy = iDeletedComponent.get('modifiedBy');\n    var deletedOn = iDeletedComponent.get('modifiedOn');\n\n    if (Blocks.has(itemKey)) {\n      Blocks = Blocks.mergeIn([itemKey], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n        isDeleted: true,\n        markModified: true,\n        deletedBy: deletedBy,\n        deletedOn: deletedOn\n      }));\n    } else if (Operators.has(itemKey)) {\n      Operators = Operators.mergeIn([itemKey], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n        isDeleted: true,\n        markModified: true,\n        deletedBy: deletedBy,\n        deletedOn: deletedOn\n      }));\n    } else if (Stacks.has(itemKey)) {\n      Stacks = Stacks.mergeIn([itemKey], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n        isDeleted: true,\n        markModified: true,\n        deletedBy: deletedBy,\n        deletedOn: deletedOn\n      }));\n      Blocks.filter(function (iItem) {\n        return iItem.get('stackID') === itemKey;\n      }).forEach(function (iItem, key) {\n        Blocks = Blocks.mergeIn([key], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n          isDeleted: true,\n          markModified: true,\n          deletedBy: deletedBy,\n          deletedOn: deletedOn\n        }));\n      });\n      Operators.filter(function (iItem) {\n        return iItem.get('stackID') === itemKey;\n      }).forEach(function (iItem, key) {\n        Operators = Operators.mergeIn([key], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n          isDeleted: true,\n          markModified: true,\n          deletedBy: deletedBy,\n          deletedOn: deletedOn\n        }));\n      });\n    }\n\n    if (template.getIn(['groups', itemKey, 'shared'])) {\n      Blocks.filter(function (iItem) {\n        return iItem.get('parentGroupID') === itemKey;\n      }).forEach(function (iItem, key) {\n        Blocks = Blocks.mergeIn([key], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n          isDeleted: true,\n          markModified: true,\n          deletedBy: deletedBy,\n          deletedOn: deletedOn\n        }));\n      });\n    }\n  });\n  var Template = template.update('connections', function (connections) {\n    if (!connections) return Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({});\n    return connections.filter(function (connection, key) {\n      return !rejectConnections.includes(key);\n    }).map(function (connection, key) {\n      var newConnection = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({});\n      var source = connection.getIn(['source', 'id']);\n      var target = connection.getIn(['target', 'id']);\n      var sourceBlockID = source.get('block_id');\n      var targetBlockID = target.get('block_id');\n      var sourceType = template.getIn(['blocks', sourceBlockID, 'type']) === _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].OPERATOR ? _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].OPERATOR : _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].BLOCK;\n      var targetType = template.getIn(['blocks', targetBlockID, 'type']) === _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].OPERATOR ? _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].OPERATOR : _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].BLOCK;\n      var srcPart = template.getIn(['blocks', sourceBlockID, 'outputs', source.get('slot_id')]);\n      var targetPart = template.getIn(['blocks', targetBlockID, 'inputs', target.get('slot_id')]);\n      var doesRejectBlockIDsIncludeSourceBlockID = rejectBlocks.some(function (iItem) {\n        return iItem.get('id') === sourceBlockID;\n      });\n      var doesRejectBlockIDsIncludeTargetBlockID = rejectBlocks.some(function (iItem) {\n        return iItem.get('id') === targetBlockID;\n      });\n\n      if (doesRejectBlockIDsIncludeSourceBlockID) {\n        var groupID = rejectBlocks.find(function (iItem) {\n          return iItem.get('id') === sourceBlockID;\n        }).get('groupID');\n        sourceBlockID = groupID;\n\n        if (template.getIn(['groups', groupID, 'shared'])) {\n          sourceBlockID = source.get('shared_group_id');\n        }\n\n        sourceType = _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].BLOCK;\n      }\n\n      if (doesRejectBlockIDsIncludeTargetBlockID) {\n        var _groupID = rejectBlocks.find(function (iItem) {\n          return iItem.get('id') === targetBlockID;\n        }).get('groupID');\n\n        targetBlockID = _groupID;\n\n        if (template.getIn(['groups', _groupID, 'shared'])) {\n          targetBlockID = target.get('shared_group_id');\n        }\n\n        targetType = _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].BLOCK;\n      }\n\n      if (sourceType === _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].BLOCK) {\n        Blocks = Blocks.setIn([sourceBlockID, 'outputs', source.get('slot_id'), 'connected'], true);\n      } else {\n        Operators = Operators.setIn([sourceBlockID, 'outputs', source.get('slot_id'), 'connected'], true);\n      }\n\n      if (targetType === _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].BLOCK) {\n        Blocks = Blocks.setIn([targetBlockID, 'inputs', target.get('slot_id'), 'connected'], true);\n      } else {\n        Operators = Operators.setIn([targetBlockID, 'inputs', target.get('slot_id'), 'connected'], true);\n      }\n\n      newConnection = newConnection.set('sources', Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([{\n        id: sourceBlockID,\n        part: srcPart.set('id', source.get('slot_id')),\n        type: sourceType\n      }]));\n      newConnection = newConnection.set('targets', Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([{\n        id: targetBlockID,\n        part: targetPart.set('id', target.get('slot_id')),\n        type: targetType\n      }]));\n      var sourceBlockErrored = (sourceType === _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].BLOCK ? Blocks : Operators).getIn([sourceBlockID, 'markModified']);\n      var targetBlockErrored = (sourceType === _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"PaperChildrenTypes\"].BLOCK ? Blocks : Operators).getIn([targetBlockID, 'markModified']);\n      newConnection = newConnection.set('markModified', sourceBlockErrored || targetBlockErrored);\n      return newConnection.set('id', key);\n    });\n  });\n  Errors = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([]).concat(Errors, Validation.getIn(['model', 'error']) || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([]));\n  (Validation.getIn(['blocks']) || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([])).forEach(function (item) {\n    Errors = Errors.concat(item.get('error'));\n  });\n  (Validation.getIn(['connections']) || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([])).forEach(function (item) {\n    Errors = Errors.concat(item.get('error'));\n  });\n  (Validation.getIn(['groups']) || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([])).forEach(function (item) {\n    Errors = Errors.concat(item.get('error'));\n  });\n  (Validation.getIn(['stacks']) || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([])).forEach(function (item) {\n    Errors = Errors.concat(item.get('error'));\n  });\n  return {\n    Blocks: Blocks,\n    Operators: Operators,\n    Stacks: Stacks,\n    Errors: Errors,\n    Validation: Validation,\n    hasEntities: hasEntities,\n    Template: Template\n  };\n};\nvar JsonEditorFooter = function JsonEditorFooter(_ref5) {\n  var onEditorPopupToggle = _ref5.onEditorPopupToggle;\n  return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_commons_src_index_components__WEBPACK_IMPORTED_MODULE_0__[\"Button\"], {\n    onClick: function onClick() {\n      return onEditorPopupToggle(false);\n    }\n  }, \"Done\");\n};\nJsonEditorFooter.propTypes = {\n  onEditorPopupToggle: prop_types__WEBPACK_IMPORTED_MODULE_5___default.a.func\n};\nJsonEditorFooter.defaultProps = {\n  onEditorPopupToggle: function onEditorPopupToggle(f) {\n    return f;\n  }\n};\nvar extractErrors = function extractErrors() {\n  var _inputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([]);\n\n  return _inputs.map(function (i) {\n    return i.getIn(['error']) || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([]);\n  }).valueSeq().reduce(function (acc, item) {\n    return Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([]).concat(acc, item);\n  }, Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([])).toJS();\n};\nvar checkError = function checkError(item) {\n  return item.some(function (i) {\n    return (i.getIn(['error']) || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])([])).size > 0;\n  });\n};\n/**\n *\n * @param slotsErrors [validation error for input/output ]\n * @param block [ builder's block state for that block id]\n * @returns {{outputHasError : boolean, inputHasError : boolean}}\n */\n\nvar checkSlotsErrors = function checkSlotsErrors(slotsErrors, block) {\n  var outputHasError = false;\n  var inputHasError = false;\n  (slotsErrors || Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({})).some(function (item, key) {\n    if ((!outputHasError || !inputHasError) && slotsErrors.getIn([key, 'parameters']).size > 0) {\n      if (block.getIn(['outputs', key])) {\n        outputHasError = true;\n      } else if (!inputHasError) {\n        inputHasError = true;\n      }\n    }\n\n    return outputHasError && inputHasError;\n  });\n  return {\n    outputHasError: outputHasError,\n    inputHasError: inputHasError\n  };\n};\nvar getItemY1 = function getItemY1(inputCount, outputCount, y0) {\n  var maxIOCount = Math.max(inputCount, outputCount);\n  return y0 + (maxIOCount > 2 ? Math.ceil((maxIOCount - 2) / 2) : 0);\n};\nvar getItemX1 = function getItemX1(x) {\n  return Math.ceil(x / _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].width);\n};\nvar getItemY0 = function getItemY0(y) {\n  return Math.ceil(y / _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].height);\n};\nvar getNewSharedGroupBlockStateReducer = function getNewSharedGroupBlockStateReducer(_ref6) {\n  var oldStateReducer = _ref6.stateReducer,\n      id = _ref6.id,\n      parentGroupID = _ref6.parentGroupID,\n      shareDetail = _ref6.shareDetail;\n  var stateReducer = oldStateReducer.set('unsaved', true);\n  var shareDetailKeys = Object.keys(shareDetail);\n  var newID = shareDetailKeys.find(function (itemKey) {\n    return !stateReducer.get('blocks').has(itemKey);\n  });\n  var oldPosition = stateReducer.getIn(['blocks', id, 'position']);\n  var x = oldPosition.get('x') + 25;\n  var y = oldPosition.get('y') + 25;\n  var y0 = getItemY0(y);\n  var newPosition = {\n    x: x,\n    y: y,\n    y0: y0,\n    x1: getItemX1(x),\n    y1: getItemY1(stateReducer.getIn(['blocks', id, 'inputs']).count(), stateReducer.getIn(['blocks', id, 'outputs']).count(), y0)\n  };\n  stateReducer = stateReducer.setIn(['blocks', newID], stateReducer.getIn(['blocks', id]).merge(Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n    id: newID,\n    position: newPosition\n  })).update('inputs', function (currentInputs) {\n    return currentInputs.map(function (iInput) {\n      return iInput.set('connected', false);\n    });\n  }).update('outputs', function (currentOutputs) {\n    return currentOutputs.map(function (iOutput) {\n      return iOutput.set('connected', false);\n    });\n  }));\n  shareDetailKeys.forEach(function (itemKey) {\n    stateReducer = stateReducer.mergeIn(['blocks', itemKey], Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({\n      parentGroupID: parentGroupID,\n      name: shareDetail[itemKey].name,\n      sharesWith: shareDetail[itemKey].sharesWith,\n      shared: true,\n      description: stateReducer.getIn(['blocks', id, 'description']),\n      component_id: stateReducer.getIn(['blocks', id, 'component_id'])\n    }));\n  });\n  return {\n    stateReducer: stateReducer,\n    newID: newID,\n    newPosition: newPosition\n  };\n};\nvar getNewStackPosition = function getNewStackPosition(selectedChild) {\n  if (!selectedChild.count()) {\n    return {};\n  }\n\n  var itemsSortedByX0 = selectedChild.sortBy(function (iItem) {\n    return iItem.getIn(['position', 'x0']);\n  });\n  var minX = itemsSortedByX0.first().getIn(['position', 'x0']);\n  var itemsSortedByX1 = selectedChild.sortBy(function (iItem) {\n    return iItem.getIn(['position', 'x1']);\n  });\n  var maxX = itemsSortedByX1.last().getIn(['position', 'x1']);\n  var itemsSortedByY0 = selectedChild.sortBy(function (iItem) {\n    return iItem.getIn(['position', 'y0']);\n  });\n  var minY = itemsSortedByY0.first().getIn(['position', 'y0']);\n  var itemsSortedByY1 = selectedChild.sortBy(function (iItem) {\n    return iItem.getIn(['position', 'y1']);\n  });\n  var maxY = itemsSortedByY1.last().getIn(['position', 'y1']);\n  var x = (minX - 1) * _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].width;\n  var y = (minY - 1) * _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].height;\n  var width = (maxX - minX + 1) * _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].width;\n  var height = (maxY - minY + 1) * _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].height;\n  return {\n    x: x,\n    y: y,\n    x0: minX,\n    y0: minY,\n    x1: maxX,\n    y1: maxY,\n    width: width,\n    height: height\n  };\n};\nvar getNewGroupPosition = function getNewGroupPosition(selectedChild) {\n  if (!selectedChild.count()) {\n    return {\n      position: {}\n    };\n  }\n\n  var positionWithMinX0 = selectedChild.first().get('position');\n  var positionWithMinY0 = selectedChild.first().get('position');\n  var maxY1 = 0;\n  var maxX1 = 0;\n  selectedChild.forEach(function (node) {\n    maxY1 = Math.max(node.getIn(['position', 'y1']), maxY1);\n    maxX1 = Math.max(node.getIn(['position', 'x1']), maxX1);\n\n    if (node.getIn(['position', 'x0']) < positionWithMinX0.get('x0')) {\n      positionWithMinX0 = node.get('position');\n    }\n\n    if (node.getIn(['position', 'y0']) < positionWithMinY0.get('y0')) {\n      positionWithMinY0 = node.get('position');\n    }\n  });\n  return {\n    span: {\n      x0: positionWithMinX0.get('x0'),\n      y0: positionWithMinY0.get('y0'),\n      x1: maxX1,\n      y1: maxY1\n    },\n    position: {\n      x0: positionWithMinX0.get('x0'),\n      y0: positionWithMinY0.get('y0'),\n      x1: positionWithMinX0.get('x0'),\n      x: positionWithMinX0.get('x'),\n      y: positionWithMinY0.get('y'),\n      width: _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].width\n    }\n  }; //\n  // if (!selectedChild.count()) {\n  //   return {};\n  // }\n  // return selectedChild.reduce((prev, next) => {\n  //   if ((next.getIn(['position', 'x1']) < prev.getIn(['position', 'x1'])) && next.getIn(['position', 'y0']) < prev.getIn(['position', 'y0'])) {\n  //     return next;\n  //   }\n  //   return prev;\n  // }, selectedChild.first()).get('position').toJS();\n};\nvar getMovedStackPositionAndDeltas = function getMovedStackPositionAndDeltas(_ref7) {\n  var oldPosition = _ref7.oldPosition,\n      newPosition = _ref7.newPosition;\n  var newStackPosition = {\n    x: Math.floor(newPosition.x / _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].width) * _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].width,\n    y: Math.floor(newPosition.y / _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].height) * _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].height,\n    width: oldPosition.width,\n    height: oldPosition.height\n  };\n  newStackPosition.y0 = getItemY0(newStackPosition.y) + 1;\n  newStackPosition.x0 = getItemX1(newStackPosition.x) + 1;\n  newStackPosition.x1 = newStackPosition.x0 + (newStackPosition.width / _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].width - 1);\n  newStackPosition.y1 = newStackPosition.y0 + (newStackPosition.height / _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"GridSize\"].height - 1);\n  var dx = newStackPosition.x - oldPosition.x;\n  var dy = newStackPosition.y - oldPosition.y;\n  var dx1 = newStackPosition.x1 - oldPosition.x1;\n  var dy0 = newStackPosition.y0 - oldPosition.y0;\n  var dx0 = newStackPosition.x0 - oldPosition.x0;\n  var dy1 = newStackPosition.y1 - oldPosition.y1;\n  return {\n    dx: dx,\n    dy: dy,\n    dx1: dx1,\n    dy0: dy0,\n    dx0: dx0,\n    dy1: dy1,\n    newStackPosition: newStackPosition\n  };\n};\nvar getTransformedIOChild = function getTransformedIOChild(activeChild) {\n  var IOs = ['inputs', 'outputs'];\n  var newActiveChild = Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])(activeChild.toJS());\n\n  for (var i = 0; i < IOs.length; i += 1) {\n    var type = IOs[i];\n    var ioObject = newActiveChild.get(type);\n\n    if (ioObject) {\n      var newIoObject = ioObject.valueSeq().reduce(function (acc, ioItem) {\n        if (ioItem.get('repeatable')) {\n          if (!ioItem.get('value')) {\n            return acc;\n          }\n\n          var repeatableIos = ioItem.get('value').valueSeq().reduce(function (innerAcc, repeatableIoItem) {\n            return innerAcc.set(repeatableIoItem.get('id'), repeatableIoItem);\n          }, Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({}));\n          return acc.merge(repeatableIos);\n        }\n\n        if (ioItem.get('optional')) {\n          return ioItem.get('value') ? acc.set(ioItem.get('id'), ioItem) : acc;\n        }\n\n        return acc.set(ioItem.get('id'), ioItem);\n      }, Object(immutable__WEBPACK_IMPORTED_MODULE_3__[\"fromJS\"])({}));\n      newActiveChild = newActiveChild.set(type, newIoObject);\n    }\n  }\n\n  return newActiveChild;\n};\nvar getSingleIOOnAddChild = function getSingleIOOnAddChild(_ref8) {\n  var next = _ref8.next,\n      parentIndex = _ref8.parentIndex;\n  var id = Object(_commons_src_index_utils__WEBPACK_IMPORTED_MODULE_2__[\"getUuId\"])();\n  var order = (parentIndex + 1) * _ModelDesigner_constants__WEBPACK_IMPORTED_MODULE_8__[\"maxInputsAndOutputsSupportedOrderForRepeatable\"];\n  var label = next.get('label');\n  return {\n    order: order,\n    label: label,\n    internal_name: next.get('internal_name'),\n    id: id,\n    parameters: {},\n    ui_param: {\n      order: order,\n      label: label\n    }\n  };\n};\nvar identifyDuplicateNames = function identifyDuplicateNames() {\n  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'name';\n  var idKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';\n  var grouped = Object(lodash__WEBPACK_IMPORTED_MODULE_4__[\"groupBy\"])(items, key);\n  var groupedItems = Object.entries(grouped); // Identifying duplicate keys\n\n  var filteredItems = groupedItems.filter(function (_ref9) {\n    var _ref10 = _slicedToArray(_ref9, 2),\n        k = _ref10[0],\n        val = _ref10[1];\n\n    return !['', null, undefined].includes(k) && val && val.length > 1;\n  }).map(function (_ref11) {\n    var _ref12 = _slicedToArray(_ref11, 2),\n        _ = _ref12[0],\n        val = _ref12[1];\n\n    return val.map(function (i) {\n      return i[idKey];\n    });\n  });\n  return {\n    duplicates: [].concat.apply([], filteredItems)\n  };\n};\nvar getValueFromBlueprint = function getValueFromBlueprint(blueprint) {\n  if (blueprint.default_value !== undefined && blueprint.default_value !== null) {\n    if (blueprint.possible_values) {\n      var defaultValueObject = blueprint.possible_values.find(function (val) {\n        return val.internal_name === blueprint.default_value;\n      });\n      var properties = Object(lodash__WEBPACK_IMPORTED_MODULE_4__[\"get\"])(defaultValueObject, 'properties');\n      return {\n        internal_name: blueprint.default_value,\n        properties: properties ? properties.reduce(function (accum, prop) {\n          return _objectSpread({}, accum, _defineProperty({}, prop.internal_name, getValueFromBlueprint(prop)));\n        }, {}) : undefined\n      };\n    }\n\n    return blueprint.default_value;\n  }\n\n  return undefined;\n};\nvar getValueFromRepeatableBlueprint = function getValueFromRepeatableBlueprint() {\n  var blueprint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    possible_values: null,\n    default_value: null\n  };\n\n  if (blueprint.default_value !== undefined && blueprint.default_value !== null) {\n    if (blueprint.possible_values) {\n      var value = blueprint.possible_values.find(function (item) {\n        return item.internal_name === blueprint.default_value;\n      });\n      var properties = Object(lodash__WEBPACK_IMPORTED_MODULE_4__[\"get\"])(value, 'properties');\n\n      if (properties) {\n        return _objectSpread({}, value, {\n          properties: properties.map(function (prop) {\n            return _objectSpread({}, prop, {\n              value: getValueFromRepeatableBlueprint(prop)\n            });\n          }, {})\n        });\n      }\n\n      return value;\n    }\n\n    return blueprint.default_value;\n  }\n\n  return undefined;\n};\n\nvar getValueFromRepeatableBlueprintOnAdd = function getValueFromRepeatableBlueprintOnAdd(blueprint) {\n  var value = blueprint.value;\n  var defaultValue = blueprint.default_value;\n  var bValue = value !== undefined ? value : defaultValue;\n\n  if (bValue && bValue.value !== undefined) {\n    var properties = bValue.value && bValue.value.properties;\n\n    if (properties) {\n      properties = transformProperties(properties);\n    }\n\n    return _objectSpread({}, bValue, {\n      properties: properties\n    });\n  }\n\n  return bValue;\n};\n\nvar transformProperties = function transformProperties(properties) {\n  var isArray = properties instanceof Array;\n\n  if (isArray) {\n    return Object.values(properties).reduce(function (accum, prop) {\n      return _objectSpread({}, accum, _defineProperty({}, prop.internal_name, _objectSpread({}, prop, {\n        value: getValueFromRepeatableBlueprintOnAdd(prop)\n      })));\n    }, {});\n  }\n\n  return Object.keys(properties).reduce(function (accum, prop) {\n    return _objectSpread({}, accum, _defineProperty({}, prop, _objectSpread({}, properties[prop], {\n      value: getValueFromRepeatableBlueprintOnAdd(properties[prop])\n    })));\n  }, {});\n};\n\nvar getValueFromRepeatableBlueprintOnLoad = function getValueFromRepeatableBlueprintOnLoad(parameterTransformed, cVal, internalName) {\n  var value;\n  if (parameterTransformed) value = cVal.value && cVal.value[internalName];else value = cVal[internalName];\n  var properties = Object(lodash__WEBPACK_IMPORTED_MODULE_4__[\"get\"])(value, ['value', 'properties']);\n\n  if (properties) {\n    properties = transformProperties(properties);\n    value = Object(lodash__WEBPACK_IMPORTED_MODULE_4__[\"set\"])(value, ['value', 'properties'], properties);\n  }\n\n  return value;\n};\nvar createNewRepeatableKey = function createNewRepeatableKey(currentKeys) {\n  return (currentKeys.length ? Math.max.apply(Math, _toConsumableArray(currentKeys)) + 1 : 1).toString();\n};\n\nvar getValue = function getValue(property, value) {\n  switch (property.data_type) {\n    case _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"ModelDesigner_DATA_TYPES\"].FLOAT:\n    case _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"ModelDesigner_DATA_TYPES\"].INTEGER:\n      return value === 0 ? 0 : value ? +value : null;\n\n    default:\n      return value || null;\n  }\n};\n\nvar getProperty = function getProperty(property, dataParam, reducerPath, transformed) {\n  var data = dataParam;\n\n  if (dataParam && transformed && _typeof(dataParam) === 'object') {\n    data = dataParam.value;\n  }\n\n  if (property.render_type === _ModelDesigner_constants__WEBPACK_IMPORTED_MODULE_8__[\"RENDER_TYPES\"].MODEL_OPTIMIZER_SCOPE || property.render_type === _ModelDesigner_constants__WEBPACK_IMPORTED_MODULE_8__[\"RENDER_TYPES\"].MATRIX || property.render_type.type && property.render_type.type.includes('TABLE')) {\n    return _objectSpread({}, property, {\n      reducerPath: reducerPath,\n      value: data || []\n    });\n  }\n\n  if (property.render_type === _ModelDesigner_constants__WEBPACK_IMPORTED_MODULE_8__[\"RENDER_TYPES\"].TEXT || property.render_type === _ModelDesigner_constants__WEBPACK_IMPORTED_MODULE_8__[\"RENDER_TYPES\"].CHECKBOX) {\n    return _objectSpread({}, property, {\n      reducerPath: reducerPath,\n      value: getValue(property, data)\n    });\n  }\n\n  if (property.render_type === _ModelDesigner_constants__WEBPACK_IMPORTED_MODULE_8__[\"RENDER_TYPES\"].DROPDOWN) {\n    var selectedObject;\n\n    if (data) {\n      selectedObject = property.possible_values.find(function (possibleValue) {\n        return possibleValue.internal_name === data.internal_name;\n      });\n    }\n\n    if (selectedObject && selectedObject.data_type !== _commons_src_index_constants__WEBPACK_IMPORTED_MODULE_1__[\"ModelDesigner_DATA_TYPES\"].COMPLEX) {\n      return _objectSpread({}, property, {\n        value: selectedObject,\n        reducerPath: reducerPath\n      });\n    }\n\n    var properties = selectedObject && selectedObject.properties;\n\n    if (properties) {\n      properties = properties.reduce(function (acc, innerProperty) {\n        var innerPropertyData;\n\n        if (data && data.properties) {\n          if (data.properties instanceof Array) {\n            var innerProp = data.properties.find(function (prop) {\n              return prop.internal_name === innerProperty.internal_name;\n            });\n            innerPropertyData = innerProp.value;\n          } else innerPropertyData = data.properties[innerProperty.internal_name]; // if (property.parameters_transformed) innerPropertyData = innerPropertyData.value;\n\n        }\n\n        return _objectSpread({}, acc, _defineProperty({}, innerProperty.internal_name, getProperty(innerProperty, innerPropertyData, reducerPath.concat(['value', 'properties', innerProperty.internal_name]), transformed)));\n      }, {});\n    }\n\n    return _objectSpread({}, property, {\n      reducerPath: reducerPath,\n      value: _objectSpread({}, selectedObject, {\n        properties: properties\n      })\n    });\n  }\n\n  if (property.render_type === _ModelDesigner_constants__WEBPACK_IMPORTED_MODULE_8__[\"RENDER_TYPES\"].JSON) {\n    return _objectSpread({}, property, {\n      reducerPath: reducerPath,\n      value: data || {},\n      uniqueIDForValue: property.uniqueIDForValue || Object(_commons_src_index_utils__WEBPACK_IMPORTED_MODULE_2__[\"getShortId\"])()\n    });\n  }\n\n  if (property.render_type === _ModelDesigner_constants__WEBPACK_IMPORTED_MODULE_8__[\"RENDER_TYPES\"].BB_TRANSFER_WEIGHTS) {\n    return _objectSpread({}, property, {\n      reducerPath: reducerPath,\n      value: data\n    });\n  }\n\n  return null;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHBzL01vZGVsL3NyYy9wYWdlcy9Nb2RlbFBhZ2UvcGFnZXMvTW9kZWxEZXNpZ25lci9Nb2RlbERlc2lnbmVyLnV0aWxzLmpzPzUzMDciXSwibmFtZXMiOlsiZ2V0RWRpdGFibGVWYWx1ZSIsImxvZ2dlZEluVXNlciIsImkiLCJQYXBlckNoaWxkcmVuVHlwZXMiLCJTVEFDSyIsIkdST1VQIiwiaW5jbHVkZXMiLCJ0eXBlIiwiZ2V0IiwiY3JlYXRlZF9ieSIsImlkIiwiY3VzdG9tQ3JlYXRlZEl0ZW0iLCJpbnRlbGxlY3R1YWxfcHJvcGVydHkiLCJub3JtYWxpc2VMZWZ0UGFuZUpzb24iLCJkYXRhIiwiZ3JvdXBOYW1lIiwiaXNSdW5uZXIiLCJub2RlUGF0aHMiLCJNT0RFTF9PVVRQVVRUSU5HX0ZMT1dTIiwiUkVTRVRfRkxPV1MiLCJsaXN0RGF0YSIsIm1hcCIsImluZGV4IiwiaXRlbXMiLCJjdXN0b21JdGVtcyIsInJlc3QiLCJuZXdJdGVtcyIsImNvbmNhdCIsImlJdGVtIiwibm9kZSIsImVkaXRhYmxlIiwiZ3JhbmRQYXJlbnRMYWJlbCIsImxhYmVsIiwib3V0cHV0cyIsInNvbWUiLCJvdXRwdXQiLCJvdXRwdXRfdHlwZSIsImRhdGFfdHlwZSIsIklPRGF0YVR5cGVzIiwiTU9ERUwiLCJjb21wb25lbnRfaWQiLCJpbnRlcm5hbF9uYW1lIiwiaW5wdXRzIiwiaW5wdXQiLCJpbnB1dF90eXBlIiwic2VsZWN0aW9uX3R5cGUiLCJpbnB1dFNlbGVjdGlvblR5cGVzIiwiSElTVE9SSUNBTCIsImluaXRpYWxHcm91cGVkIiwiXyIsImdyb3VwQnkiLCJfX3VuZ3JvdXBlZF9fIiwiZ3JvdXBlZCIsIm5ld0dyb3VwZWQiLCJyZWR1Y2UiLCJhY2MiLCJpdGVtIiwia2V5IiwiaXNHcm91cCIsIm5hbWUiLCJhIiwiaW5wdXRDb3VudCIsImlQcmV2IiwiaU5leHQiLCJtaW5pbXVtX2lucHV0cyIsIm9wdGlvbmFsIiwib3V0cHV0Q291bnQiLCJtaW5pbXVtX291dHB1dHMiLCJ1bmdyb3VwZWQiLCJydW5uZXJLZXlzIiwibm9kZXMiLCJtYXBJT0Jsb2NrIiwiZnJvbUpTIiwiaW5wIiwib3JkZXIiLCJmb3JFYWNoIiwiayIsIm1lcmdlSW4iLCJzZXRJbiIsImdldEluIiwiZGVsZXRlSW4iLCJnZXRUcmFuc2Zvcm1lZE1vZGVsVGVtcGxhdGUiLCJ0ZW1wbGF0ZSIsInZhbGlkYXRpb25SZXNwb25zZSIsIkJsb2NrcyIsIk9wZXJhdG9ycyIsIlN0YWNrcyIsIlZhbGlkYXRpb24iLCJFcnJvcnMiLCJyZWplY3RCbG9ja3MiLCJyZWplY3RTdGFja0lEcyIsInJlamVjdENvbm5lY3Rpb25zIiwiaGFzRW50aXRpZXMiLCJpR3JvdXAiLCJpR3JvdXBLZXkiLCJncm91cElEIiwiaVN0YWNrSUQiLCJwdXNoIiwibWVyZ2UiLCJwcmV2IiwibmV4dCIsInNldCIsInNoYXJlZCIsInBhcmVudEdyb3VwSUQiLCJkZXNjcmlwdGlvbiIsInNjb3BlcyIsImZpbHRlciIsImJsb2NrIiwibmV3YmxvY2siLCJ1cGRhdGUiLCJibG9ja0RldGFpbHMiLCJvdGhlclByb3BlcnRpZXMiLCJHUk9VUF9EUkFHR0FCTEVfSVRFTV9DT0xPUiIsImRlbGV0ZSIsIlN0cmluZyIsInRvVXBwZXJDYXNlIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiU3RhY2siLCJzdGFjayIsIm9yaWVudGF0aW9uVHlwZSIsInBvc2l0aW9uIiwiYmxvY2tJRCIsImhhcyIsInVwZGF0ZWRDb21wb25lbnRzIiwiZGVsZXRlZENvbXBvbmVudHMiLCJpVXBkYXRlZENvbXBvbmVudCIsIml0ZW1LZXkiLCJtb2RpZmllZEJ5IiwibW9kaWZpZWRPbiIsImlzVXBkYXRlZCIsIm1hcmtNb2RpZmllZCIsImlEZWxldGVkQ29tcG9uZW50IiwiZGVsZXRlZEJ5IiwiZGVsZXRlZE9uIiwiaXNEZWxldGVkIiwiVGVtcGxhdGUiLCJjb25uZWN0aW9ucyIsImNvbm5lY3Rpb24iLCJuZXdDb25uZWN0aW9uIiwic291cmNlIiwidGFyZ2V0Iiwic291cmNlQmxvY2tJRCIsInRhcmdldEJsb2NrSUQiLCJzb3VyY2VUeXBlIiwiT1BFUkFUT1IiLCJCTE9DSyIsInRhcmdldFR5cGUiLCJzcmNQYXJ0IiwidGFyZ2V0UGFydCIsImRvZXNSZWplY3RCbG9ja0lEc0luY2x1ZGVTb3VyY2VCbG9ja0lEIiwiZG9lc1JlamVjdEJsb2NrSURzSW5jbHVkZVRhcmdldEJsb2NrSUQiLCJmaW5kIiwicGFydCIsInNvdXJjZUJsb2NrRXJyb3JlZCIsInRhcmdldEJsb2NrRXJyb3JlZCIsIkpzb25FZGl0b3JGb290ZXIiLCJvbkVkaXRvclBvcHVwVG9nZ2xlIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiZnVuYyIsImRlZmF1bHRQcm9wcyIsImYiLCJleHRyYWN0RXJyb3JzIiwiX2lucHV0cyIsInZhbHVlU2VxIiwidG9KUyIsImNoZWNrRXJyb3IiLCJzaXplIiwiY2hlY2tTbG90c0Vycm9ycyIsInNsb3RzRXJyb3JzIiwib3V0cHV0SGFzRXJyb3IiLCJpbnB1dEhhc0Vycm9yIiwiZ2V0SXRlbVkxIiwieTAiLCJtYXhJT0NvdW50IiwiTWF0aCIsIm1heCIsImNlaWwiLCJnZXRJdGVtWDEiLCJ4IiwiR3JpZFNpemUiLCJ3aWR0aCIsImdldEl0ZW1ZMCIsInkiLCJoZWlnaHQiLCJnZXROZXdTaGFyZWRHcm91cEJsb2NrU3RhdGVSZWR1Y2VyIiwib2xkU3RhdGVSZWR1Y2VyIiwic3RhdGVSZWR1Y2VyIiwic2hhcmVEZXRhaWwiLCJzaGFyZURldGFpbEtleXMiLCJPYmplY3QiLCJrZXlzIiwibmV3SUQiLCJvbGRQb3NpdGlvbiIsIm5ld1Bvc2l0aW9uIiwieDEiLCJ5MSIsImNvdW50IiwiY3VycmVudElucHV0cyIsImlJbnB1dCIsImN1cnJlbnRPdXRwdXRzIiwiaU91dHB1dCIsInNoYXJlc1dpdGgiLCJnZXROZXdTdGFja1Bvc2l0aW9uIiwic2VsZWN0ZWRDaGlsZCIsIml0ZW1zU29ydGVkQnlYMCIsInNvcnRCeSIsIm1pblgiLCJmaXJzdCIsIml0ZW1zU29ydGVkQnlYMSIsIm1heFgiLCJsYXN0IiwiaXRlbXNTb3J0ZWRCeVkwIiwibWluWSIsIml0ZW1zU29ydGVkQnlZMSIsIm1heFkiLCJ4MCIsImdldE5ld0dyb3VwUG9zaXRpb24iLCJwb3NpdGlvbldpdGhNaW5YMCIsInBvc2l0aW9uV2l0aE1pblkwIiwibWF4WTEiLCJtYXhYMSIsInNwYW4iLCJnZXRNb3ZlZFN0YWNrUG9zaXRpb25BbmREZWx0YXMiLCJuZXdTdGFja1Bvc2l0aW9uIiwiZmxvb3IiLCJkeCIsImR5IiwiZHgxIiwiZHkwIiwiZHgwIiwiZHkxIiwiZ2V0VHJhbnNmb3JtZWRJT0NoaWxkIiwiYWN0aXZlQ2hpbGQiLCJJT3MiLCJuZXdBY3RpdmVDaGlsZCIsImxlbmd0aCIsImlvT2JqZWN0IiwibmV3SW9PYmplY3QiLCJpb0l0ZW0iLCJyZXBlYXRhYmxlSW9zIiwiaW5uZXJBY2MiLCJyZXBlYXRhYmxlSW9JdGVtIiwiZ2V0U2luZ2xlSU9PbkFkZENoaWxkIiwicGFyZW50SW5kZXgiLCJnZXRVdUlkIiwibWF4SW5wdXRzQW5kT3V0cHV0c1N1cHBvcnRlZE9yZGVyRm9yUmVwZWF0YWJsZSIsInBhcmFtZXRlcnMiLCJ1aV9wYXJhbSIsImlkZW50aWZ5RHVwbGljYXRlTmFtZXMiLCJpZEtleSIsImdyb3VwZWRJdGVtcyIsImVudHJpZXMiLCJmaWx0ZXJlZEl0ZW1zIiwidmFsIiwidW5kZWZpbmVkIiwiZHVwbGljYXRlcyIsImFwcGx5IiwiZ2V0VmFsdWVGcm9tQmx1ZXByaW50IiwiYmx1ZXByaW50IiwiZGVmYXVsdF92YWx1ZSIsInBvc3NpYmxlX3ZhbHVlcyIsImRlZmF1bHRWYWx1ZU9iamVjdCIsInByb3BlcnRpZXMiLCJhY2N1bSIsInByb3AiLCJnZXRWYWx1ZUZyb21SZXBlYXRhYmxlQmx1ZXByaW50IiwidmFsdWUiLCJnZXRWYWx1ZUZyb21SZXBlYXRhYmxlQmx1ZXByaW50T25BZGQiLCJkZWZhdWx0VmFsdWUiLCJiVmFsdWUiLCJ0cmFuc2Zvcm1Qcm9wZXJ0aWVzIiwiaXNBcnJheSIsIkFycmF5IiwidmFsdWVzIiwiZ2V0VmFsdWVGcm9tUmVwZWF0YWJsZUJsdWVwcmludE9uTG9hZCIsInBhcmFtZXRlclRyYW5zZm9ybWVkIiwiY1ZhbCIsImludGVybmFsTmFtZSIsImNyZWF0ZU5ld1JlcGVhdGFibGVLZXkiLCJjdXJyZW50S2V5cyIsInRvU3RyaW5nIiwiZ2V0VmFsdWUiLCJwcm9wZXJ0eSIsIkRBVEFfVFlQRVMiLCJGTE9BVCIsIklOVEVHRVIiLCJnZXRQcm9wZXJ0eSIsImRhdGFQYXJhbSIsInJlZHVjZXJQYXRoIiwidHJhbnNmb3JtZWQiLCJyZW5kZXJfdHlwZSIsIlJFTkRFUl9UWVBFUyIsIk1PREVMX09QVElNSVpFUl9TQ09QRSIsIk1BVFJJWCIsIlRFWFQiLCJDSEVDS0JPWCIsIkRST1BET1dOIiwic2VsZWN0ZWRPYmplY3QiLCJwb3NzaWJsZVZhbHVlIiwiQ09NUExFWCIsImlubmVyUHJvcGVydHkiLCJpbm5lclByb3BlcnR5RGF0YSIsImlubmVyUHJvcCIsIkpTT04iLCJ1bmlxdWVJREZvclZhbHVlIiwiZ2V0U2hvcnRJZCIsIkJCX1RSQU5TRkVSX1dFSUdIVFMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7O0FBTUEsSUFBTUEsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixPQUF5QjtBQUFBLE1BQXRCQyxZQUFzQixRQUF0QkEsWUFBc0I7QUFBQSxNQUFSQyxDQUFRLFFBQVJBLENBQVE7O0FBQ2hELE1BQUksQ0FBQ0MsK0VBQWtCLENBQUNDLEtBQXBCLEVBQTJCRCwrRUFBa0IsQ0FBQ0UsS0FBOUMsRUFBcURDLFFBQXJELENBQThESixDQUFDLENBQUNLLElBQWhFLENBQUosRUFBMkU7QUFDekUsV0FBUU4sWUFBWSxDQUFDTyxHQUFiLENBQWlCLFFBQWpCLE1BQStCTixDQUFDLENBQUNPLFVBQUYsQ0FB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RCxNQUFJb0IsUUFBUSxDQUFDUSxXQUFULEtBQXlCQyxxRUFBWSxDQUFDWSxJQUExQyxFQUFnRDtBQUM5Qyw2QkFDS3JCLFFBREw7QUFFRU0saUJBQVcsRUFBWEEsV0FGRjtBQUdFdEIsV0FBSyxFQUFFOVAsSUFBSSxJQUFJLEVBSGpCO0FBSUVvUyxzQkFBZ0IsRUFBRXRCLFFBQVEsQ0FBQ3NCLGdCQUFULElBQTZCQywyRUFBVTtBQUozRDtBQU1EOztBQUVELE1BQUl2QixRQUFRLENBQUNRLFdBQVQsS0FBeUJDLHFFQUFZLENBQUNlLG1CQUExQyxFQUErRDtBQUM3RCw2QkFDS3hCLFFBREw7QUFFRU0saUJBQVcsRUFBWEEsV0FGRjtBQUdFdEIsV0FBSyxFQUFFOVA7QUFIVDtBQUtEOztBQUNELFNBQU8sSUFBUDtBQUNELENBNUVNIiwiZmlsZSI6Ii4vYXBwcy9Nb2RlbC9zcmMvcGFnZXMvTW9kZWxQYWdlL3BhZ2VzL01vZGVsRGVzaWduZXIvTW9kZWxEZXNpZ25lci51dGlscy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ0JCQ29tcG9uZW50cyc7XG5pbXBvcnQgeyBHcmlkU2l6ZSwgTW9kZWxEZXNpZ25lcl9EQVRBX1RZUEVTIGFzIERBVEFfVFlQRVMsIFBhcGVyQ2hpbGRyZW5UeXBlcyB9IGZyb20gJ0JCQ29uc3RhbnRzJztcbmltcG9ydCB7IGdldFNob3J0SWQsIGdldFV1SWQgfSBmcm9tICdCQlV0aWxzJztcbmltcG9ydCB7IGZyb21KUyB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgeyBnZXQsIGdyb3VwQnksIHNldCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIGlucHV0U2VsZWN0aW9uVHlwZXMsXG4gIElPRGF0YVR5cGVzLFxufSBmcm9tICcuLi9Nb2RlbFJ1bm5lci9wYWdlcy9Nb2RlbFJ1bm5lckRlc2lnbmVyL01vZGVsUnVubmVyRGVzaWduZXIuY29uc3RhbnRzJztcbmltcG9ydCB7XG4gIEdST1VQX0RSQUdHQUJMRV9JVEVNX0NPTE9SLFxuICBtYXhJbnB1dHNBbmRPdXRwdXRzU3VwcG9ydGVkT3JkZXJGb3JSZXBlYXRhYmxlLFxuICBSRU5ERVJfVFlQRVMsXG59IGZyb20gJy4vTW9kZWxEZXNpZ25lci5jb25zdGFudHMnO1xuXG5jb25zdCBnZXRFZGl0YWJsZVZhbHVlID0gKHsgbG9nZ2VkSW5Vc2VyLCBpIH0pID0+IHtcbiAgaWYgKFtQYXBlckNoaWxkcmVuVHlwZXMuU1RBQ0ssIFBhcGVyQ2hpbGRyZW5UeXBlcy5HUk9VUF0uaW5jbHVkZXMoaS50eXBlKSkge1xuICAgIHJldHVybiAobG9nZ2VkSW5Vc2VyLmdldCgndXNlcklkJykgPT09IGkuY3JlYXRlZF9ieS5pZCk7XG4gIH0gaWYgKGkuY3VzdG9tQ3JlYXRlZEl0ZW0pIHtcbiAgICByZXR1cm4gKGkuaW50ZWxsZWN0dWFsX3Byb3BlcnR5KSA/IChsb2dnZWRJblVzZXIuZ2V0KCd1c2VySWQnKSA9PT0gaS5jcmVhdGVkX2J5LmlkKSA6IHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbmV4cG9ydCBjb25zdCBub3JtYWxpc2VMZWZ0UGFuZUpzb24gPSAoeyBkYXRhLCBncm91cE5hbWUgPSAnZ3JvdXBfbmFtZScsIGlzUnVubmVyLCBsb2dnZWRJblVzZXIgfSkgPT4ge1xuICBjb25zdCBub2RlUGF0aHMgPSB7fTtcbiAgY29uc3QgTU9ERUxfT1VUUFVUVElOR19GTE9XUyA9IHt9O1xuICBjb25zdCBSRVNFVF9GTE9XUyA9IHt9O1xuICBjb25zdCBsaXN0RGF0YSA9IGRhdGEubWFwKFxuICAgICh7IGl0ZW1zLCBjdXN0b21JdGVtcywgLi4ucmVzdCB9LCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgbmV3SXRlbXMgPSAoaXRlbXMuY29uY2F0KChjdXN0b21JdGVtcyB8fCBbXSlcbiAgICAgICAgLm1hcChpSXRlbSA9PiAoeyAuLi5pSXRlbSwgY3VzdG9tQ3JlYXRlZEl0ZW06IHRydWUgfSkpKSlcbiAgICAgICAgLm1hcCgoaSkgPT4ge1xuICAgICAgICAgIGNvbnN0IG5vZGUgPSB7XG4gICAgICAgICAgICBlZGl0YWJsZTogZ2V0RWRpdGFibGVWYWx1ZSh7IGxvZ2dlZEluVXNlciwgaSB9KSxcbiAgICAgICAgICAgIHR5cGU6IHJlc3QudHlwZSxcbiAgICAgICAgICAgIC4uLmksXG4gICAgICAgICAgICBncmFuZFBhcmVudExhYmVsOiByZXN0LmxhYmVsLFxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKGlzUnVubmVyKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgICAgICAgaWYgKG5vZGUub3V0cHV0cy5zb21lKG91dHB1dCA9PiBvdXRwdXQub3V0cHV0X3R5cGUuZGF0YV90eXBlID09PSBJT0RhdGFUeXBlcy5NT0RFTCkpIHtcbiAgICAgICAgICAgICAgTU9ERUxfT1VUUFVUVElOR19GTE9XU1tub2RlLmNvbXBvbmVudF9pZF0gPSB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxfbmFtZTogbm9kZS5pbnRlcm5hbF9uYW1lLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGUuaW5wdXRzLnNvbWUoaW5wdXQgPT4gKGlucHV0LmlucHV0X3R5cGUuZGF0YV90eXBlID09PSBJT0RhdGFUeXBlcy5NT0RFTCkgJiYgKGlucHV0LmlucHV0X3R5cGUuc2VsZWN0aW9uX3R5cGUgPT09IGlucHV0U2VsZWN0aW9uVHlwZXMuSElTVE9SSUNBTCkpKSB7XG4gICAgICAgICAgICAgIFJFU0VUX0ZMT1dTW25vZGUuY29tcG9uZW50X2lkXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9KTtcbiAgICAgIGNvbnN0IGluaXRpYWxHcm91cGVkID0gXy5ncm91cEJ5KG5ld0l0ZW1zLCBpID0+IGlbZ3JvdXBOYW1lXSB8fCAnX191bmdyb3VwZWRfXycpO1xuXG4gICAgICBjb25zdCB7IF9fdW5ncm91cGVkX18sIC4uLmdyb3VwZWQgfSA9IGluaXRpYWxHcm91cGVkO1xuXG4gICAgICBjb25zdCBuZXdHcm91cGVkID0gXy5yZWR1Y2UoZ3JvdXBlZCwgKGFjYywgaXRlbSwga2V5KSA9PiAoe1xuICAgICAgICAuLi5hY2MsXG4gICAgICAgIFtrZXldOiB7XG4gICAgICAgICAgaXNHcm91cDogdHJ1ZSxcbiAgICAgICAgICBpZDoga2V5LFxuICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICB0eXBlOiByZXN0LnR5cGUsXG4gICAgICAgICAgaXRlbXM6IChpdGVtLnJlZHVjZSgoYSwgaSkgPT4ge1xuICAgICAgICAgICAgbm9kZVBhdGhzW2kuY29tcG9uZW50X2lkXSA9IFtpbmRleCwgJ2l0ZW1zJywga2V5LCAnaXRlbXMnLCBpLmNvbXBvbmVudF9pZF07XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5hLFxuICAgICAgICAgICAgICBbaS5jb21wb25lbnRfaWRdOiB7XG4gICAgICAgICAgICAgICAgLi4uaSxcbiAgICAgICAgICAgICAgICBpc0dyb3VwOiB0cnVlLFxuICAgICAgICAgICAgICAgIGlucHV0Q291bnQ6IChpLmlucHV0cyB8fCBbXSkucmVkdWNlKChpUHJldiwgaU5leHQpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChpTmV4dC5taW5pbXVtX2lucHV0cykge1xuICAgICAgICAgICAgICAgICAgICBpUHJldiArPSBpTmV4dC5taW5pbXVtX2lucHV0cztcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlOZXh0Lm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlQcmV2ICs9IDE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaVByZXY7XG4gICAgICAgICAgICAgICAgfSwgMCksXG4gICAgICAgICAgICAgICAgb3V0cHV0Q291bnQ6IChpLm91dHB1dHMgfHwgW10pLnJlZHVjZSgoaVByZXYsIGlOZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoaU5leHQubWluaW11bV9vdXRwdXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlQcmV2ICs9IGlOZXh0Lm1pbmltdW1fb3V0cHV0cztcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlOZXh0Lm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlQcmV2ICs9IDE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaVByZXY7XG4gICAgICAgICAgICAgICAgfSwgMCksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sXG4gICAgICAgICAge30pKSxcbiAgICAgICAgfSxcbiAgICAgIH0pLCB7fSk7XG5cbiAgICAgIGNvbnN0IHVuZ3JvdXBlZCA9IF8ucmVkdWNlKF9fdW5ncm91cGVkX18sXG4gICAgICAgIChhY2MsIGl0ZW0pID0+IHtcbiAgICAgICAgICBub2RlUGF0aHNbaXRlbS5jb21wb25lbnRfaWRdID0gW2luZGV4LCAnaXRlbXMnLCBpdGVtLmNvbXBvbmVudF9pZF07XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgIFtpdGVtLmNvbXBvbmVudF9pZF06IHtcbiAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgaXNHcm91cDogZmFsc2UsXG4gICAgICAgICAgICAgIGlucHV0Q291bnQ6IChpdGVtLmlucHV0cyB8fCBbXSkucmVkdWNlKChpUHJldiwgaU5leHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaU5leHQubWluaW11bV9pbnB1dHMpIHtcbiAgICAgICAgICAgICAgICAgIGlQcmV2ICs9IGlOZXh0Lm1pbmltdW1faW5wdXRzO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlOZXh0Lm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICBpUHJldiArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaVByZXY7XG4gICAgICAgICAgICAgIH0sIDApLFxuICAgICAgICAgICAgICBvdXRwdXRDb3VudDogKGl0ZW0ub3V0cHV0cyB8fCBbXSkucmVkdWNlKChpUHJldiwgaU5leHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaU5leHQubWluaW11bV9vdXRwdXRzKSB7XG4gICAgICAgICAgICAgICAgICBpUHJldiArPSBpTmV4dC5taW5pbXVtX291dHB1dHM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaU5leHQub3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgIGlQcmV2ICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpUHJldjtcbiAgICAgICAgICAgICAgfSwgMCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHt9KTtcblxuICAgICAgcmV0dXJuICh7XG4gICAgICAgIC4uLnJlc3QsXG4gICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgLi4ubmV3R3JvdXBlZCxcbiAgICAgICAgICAuLi51bmdyb3VwZWQsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICBjb25zdCBydW5uZXJLZXlzID0gaXNSdW5uZXIgPyB7IE1PREVMX09VVFBVVFRJTkdfRkxPV1MsIFJFU0VUX0ZMT1dTIH0gOiB7fTtcblxuICByZXR1cm4ge1xuICAgIG5vZGVzOiBsaXN0RGF0YSxcbiAgICBub2RlUGF0aHMsXG4gICAgLi4ucnVubmVyS2V5cyxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcElPQmxvY2sgPSAoaW5wdXRzKSA9PiB7XG4gIGlmICghaW5wdXRzKSByZXR1cm4gZnJvbUpTKHt9KTtcbiAgbGV0IGlucCA9IGZyb21KUyh7fSk7XG4gIGxldCBvcmRlciA9IDA7XG4gIGlucHV0cy5mb3JFYWNoKChpbnB1dCwgaykgPT4ge1xuICAgIGlucCA9IGlucC5tZXJnZUluKFtrXSwgaW5wdXQpO1xuICAgIGlucCA9IGlucC5zZXRJbihbaywgJ2lkJ10sIGspO1xuICAgIGlucCA9IGlucC5zZXRJbihbaywgJ29yZGVyJ10sIGlucHV0LmdldEluKFsndWlfcGFyYW0nLCAnb3JkZXInXSkgfHwgKG9yZGVyICs9IDEpKTtcbiAgICBpbnAgPSBpbnAuc2V0SW4oW2ssICdsYWJlbCddLCBpbnB1dC5nZXRJbihbJ3VpX3BhcmFtJywgJ2xhYmVsJ10pKTtcbiAgICBpbnAgPSBpbnAuZGVsZXRlSW4oW2ssICd1aV9wYXJhbSddKTtcbiAgfSk7XG4gIHJldHVybiBpbnA7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VHJhbnNmb3JtZWRNb2RlbFRlbXBsYXRlID0gKHsgdGVtcGxhdGUsIHZhbGlkYXRpb25SZXNwb25zZSB9KSA9PiB7XG4gIGxldCBCbG9ja3MgPSBmcm9tSlMoe30pO1xuICBsZXQgT3BlcmF0b3JzID0gZnJvbUpTKHt9KTtcbiAgbGV0IFN0YWNrcyA9IGZyb21KUyh7fSk7XG4gIGxldCBWYWxpZGF0aW9uID0gZnJvbUpTKHt9KTtcbiAgbGV0IEVycm9ycyA9IGZyb21KUyhbXSk7XG5cbiAgbGV0IHJlamVjdEJsb2NrcyA9IGZyb21KUyhbXSk7XG4gIGxldCByZWplY3RTdGFja0lEcyA9IGZyb21KUyhbXSk7XG4gIGxldCByZWplY3RDb25uZWN0aW9ucyA9IGZyb21KUyhbXSk7XG4gIGxldCBoYXNFbnRpdGllcyA9IGZhbHNlO1xuXG4gICh0ZW1wbGF0ZS5nZXQoJ2dyb3VwcycpIHx8IGZyb21KUyh7fSkpLmZvckVhY2goKGlHcm91cCwgaUdyb3VwS2V5KSA9PiB7XG4gICAgaGFzRW50aXRpZXMgPSB0cnVlO1xuICAgIGlmIChpR3JvdXAuZ2V0KCdibG9ja19pZHMnKSkge1xuICAgICAgcmVqZWN0QmxvY2tzID0gcmVqZWN0QmxvY2tzLmNvbmNhdChpR3JvdXAuZ2V0KCdibG9ja19pZHMnKS5tYXAoaUl0ZW0gPT4gZnJvbUpTKHtcbiAgICAgICAgaWQ6IGlJdGVtLFxuICAgICAgICBncm91cElEOiBpR3JvdXBLZXksXG4gICAgICB9KSkpO1xuICAgIH1cbiAgICBpZiAoaUdyb3VwLmdldCgnY29ubmVjdGlvbl9pZHMnKSkge1xuICAgICAgcmVqZWN0Q29ubmVjdGlvbnMgPSByZWplY3RDb25uZWN0aW9ucy5jb25jYXQoaUdyb3VwLmdldCgnY29ubmVjdGlvbl9pZHMnKSk7XG4gICAgfVxuICAgIGlmIChpR3JvdXAuZ2V0KCdzdGFja19pZHMnKSkge1xuICAgICAgaUdyb3VwLmdldCgnc3RhY2tfaWRzJykuZm9yRWFjaCgoaVN0YWNrSUQpID0+IHtcbiAgICAgICAgcmVqZWN0U3RhY2tJRHMgPSByZWplY3RTdGFja0lEcy5wdXNoKGlTdGFja0lEKTtcbiAgICAgICAgcmVqZWN0QmxvY2tzID0gcmVqZWN0QmxvY2tzLmNvbmNhdCh0ZW1wbGF0ZS5nZXRJbihbJ3N0YWNrcycsIGlTdGFja0lELCAnYmxvY2tzJ10pLm1hcChpSXRlbSA9PiBmcm9tSlMoe1xuICAgICAgICAgIGlkOiBpSXRlbSxcbiAgICAgICAgICBncm91cElEOiBpR3JvdXBLZXksXG4gICAgICAgIH0pKSk7XG4gICAgICAgIHJlamVjdENvbm5lY3Rpb25zID0gcmVqZWN0Q29ubmVjdGlvbnMuY29uY2F0KHRlbXBsYXRlLmdldEluKFsnc3RhY2tzJywgaVN0YWNrSUQsICdjb25uZWN0aW9ucyddKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gICh0ZW1wbGF0ZS5nZXQoJ2Jsb2NrcycpIHx8IGZyb21KUyh7fSkpXG4gICAgLm1lcmdlKCh0ZW1wbGF0ZS5nZXQoJ2dyb3VwcycpIHx8IGZyb21KUyh7fSkpXG4gICAgICAucmVkdWNlKChwcmV2LCBuZXh0KSA9PiB7XG4gICAgICAgIGhhc0VudGl0aWVzID0gdHJ1ZTtcbiAgICAgICAgaWYgKG5leHQuZ2V0KCdzaGFyZWQnKSkge1xuICAgICAgICAgIG5leHQuZ2V0SW4oWydzaGFyZWRDb21wb25lbnREZXRhaWwnLCAnc2hhcmVEZXRhaWwnXSkuZm9yRWFjaCgoaUl0ZW0pID0+IHtcbiAgICAgICAgICAgIHByZXYgPSBwcmV2LnNldChpSXRlbS5nZXQoJ2lkJyksXG4gICAgICAgICAgICAgIGlJdGVtLm1lcmdlKGZyb21KUyh7XG4gICAgICAgICAgICAgICAgdHlwZTogUGFwZXJDaGlsZHJlblR5cGVzLkdST1VQLFxuICAgICAgICAgICAgICAgIHNoYXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXJlbnRHcm91cElEOiBuZXh0LmdldCgnaWQnKSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbmV4dC5nZXQoJ2Rlc2NyaXB0aW9uJyksXG4gICAgICAgICAgICAgICAgaW5wdXRzOiBuZXh0LmdldCgnaW5wdXRzJyksXG4gICAgICAgICAgICAgICAgb3V0cHV0czogbmV4dC5nZXQoJ291dHB1dHMnKSxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRfaWQ6IG5leHQuZ2V0KCdjb21wb25lbnRfaWQnKSxcbiAgICAgICAgICAgICAgICBzY29wZXM6IG5leHQuZ2V0KCdzY29wZXMnKSxcbiAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2ID0gcHJldi5zZXQobmV4dC5nZXQoJ2lkJyksIG5leHQuc2V0KCd0eXBlJywgUGFwZXJDaGlsZHJlblR5cGVzLkdST1VQKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9LCBmcm9tSlMoe30pKSlcbiAgICAuZmlsdGVyKChibG9jaywga2V5KSA9PiAhKHJlamVjdEJsb2Nrcy5zb21lKGlJdGVtID0+IGlJdGVtLmdldCgnaWQnKSA9PT0ga2V5KSkpXG4gICAgLmZvckVhY2goKGJsb2NrLCBrZXkpID0+IHtcbiAgICAgIGxldCBuZXdibG9jayA9IGJsb2NrLnNldCgnaWQnLCBrZXkpO1xuICAgICAgaWYgKG5ld2Jsb2NrLmdldCgndHlwZScpID09PSBQYXBlckNoaWxkcmVuVHlwZXMuR1JPVVApIHtcbiAgICAgICAgbmV3YmxvY2sgPSBuZXdibG9ja1xuICAgICAgICAgIC51cGRhdGUoJ2lucHV0cycsIGlucHV0cyA9PiBpbnB1dHMucmVkdWNlKChwcmV2LCBuZXh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBibG9ja0RldGFpbHMgPSB0ZW1wbGF0ZS5nZXRJbihbJ2Jsb2NrcycsIG5leHQuZ2V0KCdibG9ja0lkJyldKTtcblxuICAgICAgICAgICAgcmV0dXJuIHByZXYuc2V0KG5leHQuZ2V0KCdpZCcpLCBmcm9tSlMoe1xuICAgICAgICAgICAgICBpZDogbmV4dC5nZXQoJ2lkJyksXG4gICAgICAgICAgICAgIG90aGVyUHJvcGVydGllczogbmV4dC5zZXQoJ3R5cGUnLCBQYXBlckNoaWxkcmVuVHlwZXMuR1JPVVApLFxuICAgICAgICAgICAgICBsYWJlbDogYCR7YmxvY2tEZXRhaWxzLmdldCgnbmFtZScpfTo6JHtibG9ja0RldGFpbHMuZ2V0SW4oWydpbnB1dHMnLCBuZXh0LmdldCgnaWQnKSwgJ3VpX3BhcmFtJywgJ2xhYmVsJ10pfWAsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSwgZnJvbUpTKHt9KSkpXG4gICAgICAgICAgLnVwZGF0ZSgnb3V0cHV0cycsIG91dHB1dHMgPT4gb3V0cHV0cy5yZWR1Y2UoKHByZXYsIG5leHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrRGV0YWlscyA9IHRlbXBsYXRlLmdldEluKFsnYmxvY2tzJywgbmV4dC5nZXQoJ2Jsb2NrSWQnKV0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcHJldi5zZXQobmV4dC5nZXQoJ2lkJyksIGZyb21KUyh7XG4gICAgICAgICAgICAgIGlkOiBuZXh0LmdldCgnaWQnKSxcbiAgICAgICAgICAgICAgb3RoZXJQcm9wZXJ0aWVzOiBuZXh0LnNldCgndHlwZScsIFBhcGVyQ2hpbGRyZW5UeXBlcy5HUk9VUCksXG4gICAgICAgICAgICAgIGxhYmVsOiBgJHtibG9ja0RldGFpbHMuZ2V0KCduYW1lJyl9Ojoke2Jsb2NrRGV0YWlscy5nZXRJbihbJ291dHB1dHMnLCBuZXh0LmdldCgnaWQnKSwgJ3VpX3BhcmFtJywgJ2xhYmVsJ10pfWAsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSwgZnJvbUpTKHt9KSkpXG4gICAgICAgICAgLnNldCgnY29sb3InLCBHUk9VUF9EUkFHR0FCTEVfSVRFTV9DT0xPUik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdibG9jayA9IG5ld2Jsb2NrLnVwZGF0ZSgnaW5wdXRzJywgbWFwSU9CbG9jayk7XG4gICAgICAgIG5ld2Jsb2NrID0gbmV3YmxvY2sudXBkYXRlKCdvdXRwdXRzJywgbWFwSU9CbG9jayk7XG4gICAgICAgIG5ld2Jsb2NrID0gbmV3YmxvY2suc2V0KCdjb2xvcicsIGZyb21KUyhuZXdibG9jay5nZXRJbihbJ3VpX3BhcmFtJywgJ2NvbG9yJ10pKSk7XG4gICAgICB9XG4gICAgICBuZXdibG9jayA9IG5ld2Jsb2NrLnNldCgncG9zaXRpb24nLCBmcm9tSlMobmV3YmxvY2suZ2V0SW4oWyd1aV9wYXJhbScsICdwb3NpdGlvbiddKSkpO1xuICAgICAgbmV3YmxvY2sgPSBuZXdibG9jay5zZXQoJ2dyb3VwX25hbWUnLCBmcm9tSlMobmV3YmxvY2suZ2V0SW4oWyd1aV9wYXJhbScsICdncm91cF9uYW1lJ10pKSk7XG4gICAgICBuZXdibG9jayA9IG5ld2Jsb2NrLnNldCgnZGVzY3JpcHRpb24nLCBmcm9tSlMobmV3YmxvY2suZ2V0SW4oWyd1aV9wYXJhbScsICdkZXNjcmlwdGlvbiddKSkpO1xuICAgICAgbmV3YmxvY2sgPSBuZXdibG9jay5kZWxldGUoJ3VpX3BhcmFtJyk7XG5cbiAgICAgIGlmIChTdHJpbmcobmV3YmxvY2suZ2V0KCd0eXBlJykpLnRvVXBwZXJDYXNlKCkgIT09ICdPUEVSQVRPUicpIHtcbiAgICAgICAgQmxvY2tzID0gQmxvY2tzLnNldChrZXksIG5ld2Jsb2NrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld2Jsb2NrID0gbmV3YmxvY2suc2V0KCdpY29uJywgYG9wZXJhdG9yLSR7bmV3YmxvY2suZ2V0KCdpbnRlcm5hbF9uYW1lJykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdvcGVyYXRvcicsICcnKX1gKTtcbiAgICAgICAgT3BlcmF0b3JzID0gT3BlcmF0b3JzLnNldChrZXksIG5ld2Jsb2NrKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAodGVtcGxhdGUuZ2V0KCdzdGFja3MnKSB8fCBmcm9tSlMoe30pKVxuICAgIC5maWx0ZXIoKFN0YWNrLCBrZXkpID0+ICEocmVqZWN0U3RhY2tJRHMuaW5jbHVkZXMoa2V5KSkpXG4gICAgLmZvckVhY2goKFN0YWNrLCBrZXkpID0+IHtcbiAgICAgIGhhc0VudGl0aWVzID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHN0YWNrID0gU3RhY2tcbiAgICAgICAgLm1lcmdlKHtcbiAgICAgICAgICBpZDoga2V5LFxuICAgICAgICAgIG9yaWVudGF0aW9uVHlwZTogU3RhY2suZ2V0KCd0eXBlJyksXG4gICAgICAgICAgdHlwZTogUGFwZXJDaGlsZHJlblR5cGVzLlNUQUNLLFxuICAgICAgICAgIHBvc2l0aW9uOiBmcm9tSlMoU3RhY2suZ2V0SW4oWyd1aV9wYXJhbScsICdwb3NpdGlvbiddKSksXG4gICAgICAgIH0pLmRlbGV0ZSgndWlfcGFyYW0nKTtcblxuICAgICAgU3RhY2tzID0gU3RhY2tzLnNldChrZXksIHN0YWNrKTtcbiAgICAgIHN0YWNrLmdldCgnYmxvY2tzJykuZm9yRWFjaCgoYmxvY2tJRCkgPT4ge1xuICAgICAgICBpZiAoQmxvY2tzLmhhcyhibG9ja0lEKSkge1xuICAgICAgICAgIEJsb2NrcyA9IEJsb2Nrcy5zZXRJbihbYmxvY2tJRCwgJ3N0YWNrSUQnXSwga2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBPcGVyYXRvcnMgPSBPcGVyYXRvcnMuc2V0SW4oW2Jsb2NrSUQsICdzdGFja0lEJ10sIGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIFZhbGlkYXRpb24gPSBmcm9tSlModmFsaWRhdGlvblJlc3BvbnNlIHx8IHt9KTtcbiAgY29uc3QgdXBkYXRlZENvbXBvbmVudHMgPSBWYWxpZGF0aW9uLmdldCgndXBkYXRlZENvbXBvbmVudHMnKSB8fCBmcm9tSlMoW10pO1xuICBjb25zdCBkZWxldGVkQ29tcG9uZW50cyA9IFZhbGlkYXRpb24uZ2V0KCdkZWxldGVkQ29tcG9uZW50cycpIHx8IGZyb21KUyhbXSk7XG5cbiAgdXBkYXRlZENvbXBvbmVudHMuZm9yRWFjaCgoaVVwZGF0ZWRDb21wb25lbnQpID0+IHtcbiAgICBjb25zdCBpdGVtS2V5ID0gaVVwZGF0ZWRDb21wb25lbnQuZ2V0KCdjb21wb25lbnRJZCcpO1xuICAgIGNvbnN0IG1vZGlmaWVkQnkgPSBpVXBkYXRlZENvbXBvbmVudC5nZXQoJ21vZGlmaWVkQnknKTtcbiAgICBjb25zdCBtb2RpZmllZE9uID0gaVVwZGF0ZWRDb21wb25lbnQuZ2V0KCdtb2RpZmllZE9uJyk7XG5cbiAgICBpZiAoQmxvY2tzLmhhcyhpdGVtS2V5KSkge1xuICAgICAgQmxvY2tzID0gQmxvY2tzLm1lcmdlSW4oW2l0ZW1LZXldLCBmcm9tSlMoe1xuICAgICAgICBpc1VwZGF0ZWQ6IHRydWUsXG4gICAgICAgIG1hcmtNb2RpZmllZDogdHJ1ZSxcbiAgICAgICAgbW9kaWZpZWRCeSxcbiAgICAgICAgbW9kaWZpZWRPbixcbiAgICAgIH0pKTtcbiAgICB9IGVsc2UgaWYgKE9wZXJhdG9ycy5oYXMoaXRlbUtleSkpIHtcbiAgICAgIE9wZXJhdG9ycyA9IE9wZXJhdG9ycy5tZXJnZUluKFtpdGVtS2V5XSwgZnJvbUpTKHtcbiAgICAgICAgaXNVcGRhdGVkOiB0cnVlLFxuICAgICAgICBtYXJrTW9kaWZpZWQ6IHRydWUsXG4gICAgICAgIG1vZGlmaWVkQnksXG4gICAgICAgIG1vZGlmaWVkT24sXG4gICAgICB9KSk7XG4gICAgfSBlbHNlIGlmIChTdGFja3MuaGFzKGl0ZW1LZXkpKSB7XG4gICAgICBTdGFja3MgPSBTdGFja3MubWVyZ2VJbihbaXRlbUtleV0sIGZyb21KUyh7XG4gICAgICAgIGlzVXBkYXRlZDogdHJ1ZSxcbiAgICAgICAgbWFya01vZGlmaWVkOiB0cnVlLFxuICAgICAgICBtb2RpZmllZEJ5LFxuICAgICAgICBtb2RpZmllZE9uLFxuICAgICAgfSkpO1xuICAgICAgQmxvY2tzLmZpbHRlcihpSXRlbSA9PiBpSXRlbS5nZXQoJ3N0YWNrSUQnKSA9PT0gaXRlbUtleSkuZm9yRWFjaCgoaUl0ZW0sIGtleSkgPT4ge1xuICAgICAgICBCbG9ja3MgPSBCbG9ja3MubWVyZ2VJbihba2V5XSwgZnJvbUpTKHtcbiAgICAgICAgICBpc1VwZGF0ZWQ6IHRydWUsXG4gICAgICAgICAgbWFya01vZGlmaWVkOiB0cnVlLFxuICAgICAgICAgIG1vZGlmaWVkQnksXG4gICAgICAgICAgbW9kaWZpZWRPbixcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBPcGVyYXRvcnMuZmlsdGVyKGlJdGVtID0+IGlJdGVtLmdldCgnc3RhY2tJRCcpID09PSBpdGVtS2V5KS5mb3JFYWNoKChpSXRlbSwga2V5KSA9PiB7XG4gICAgICAgIE9wZXJhdG9ycyA9IE9wZXJhdG9ycy5tZXJnZUluKFtrZXldLCBmcm9tSlMoe1xuICAgICAgICAgIGlzVXBkYXRlZDogdHJ1ZSxcbiAgICAgICAgICBtYXJrTW9kaWZpZWQ6IHRydWUsXG4gICAgICAgICAgbW9kaWZpZWRCeSxcbiAgICAgICAgICBtb2RpZmllZE9uLFxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlLmdldEluKFsnZ3JvdXBzJywgaXRlbUtleSwgJ3NoYXJlZCddKSkge1xuICAgICAgQmxvY2tzLmZpbHRlcihpSXRlbSA9PiBpSXRlbS5nZXQoJ3BhcmVudEdyb3VwSUQnKSA9PT0gaXRlbUtleSkuZm9yRWFjaCgoaUl0ZW0sIGtleSkgPT4ge1xuICAgICAgICBCbG9ja3MgPSBCbG9ja3MubWVyZ2VJbihba2V5XSwgZnJvbUpTKHtcbiAgICAgICAgICBpc1VwZGF0ZWQ6IHRydWUsXG4gICAgICAgICAgbWFya01vZGlmaWVkOiB0cnVlLFxuICAgICAgICAgIG1vZGlmaWVkQnksXG4gICAgICAgICAgbW9kaWZpZWRPbixcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBkZWxldGVkQ29tcG9uZW50cy5mb3JFYWNoKChpRGVsZXRlZENvbXBvbmVudCkgPT4ge1xuICAgIGNvbnN0IGl0ZW1LZXkgPSBpRGVsZXRlZENvbXBvbmVudC5nZXQoJ2NvbXBvbmVudElkJyk7XG4gICAgY29uc3QgZGVsZXRlZEJ5ID0gaURlbGV0ZWRDb21wb25lbnQuZ2V0KCdtb2RpZmllZEJ5Jyk7XG4gICAgY29uc3QgZGVsZXRlZE9uID0gaURlbGV0ZWRDb21wb25lbnQuZ2V0KCdtb2RpZmllZE9uJyk7XG5cbiAgICBpZiAoQmxvY2tzLmhhcyhpdGVtS2V5KSkge1xuICAgICAgQmxvY2tzID0gQmxvY2tzLm1lcmdlSW4oW2l0ZW1LZXldLCBmcm9tSlMoe1xuICAgICAgICBpc0RlbGV0ZWQ6IHRydWUsXG4gICAgICAgIG1hcmtNb2RpZmllZDogdHJ1ZSxcbiAgICAgICAgZGVsZXRlZEJ5LFxuICAgICAgICBkZWxldGVkT24sXG4gICAgICB9KSk7XG4gICAgfSBlbHNlIGlmIChPcGVyYXRvcnMuaGFzKGl0ZW1LZXkpKSB7XG4gICAgICBPcGVyYXRvcnMgPSBPcGVyYXRvcnMubWVyZ2VJbihbaXRlbUtleV0sIGZyb21KUyh7XG4gICAgICAgIGlzRGVsZXRlZDogdHJ1ZSxcbiAgICAgICAgbWFya01vZGlmaWVkOiB0cnVlLFxuICAgICAgICBkZWxldGVkQnksXG4gICAgICAgIGRlbGV0ZWRPbixcbiAgICAgIH0pKTtcbiAgICB9IGVsc2UgaWYgKFN0YWNrcy5oYXMoaXRlbUtleSkpIHtcbiAgICAgIFN0YWNrcyA9IFN0YWNrcy5tZXJnZUluKFtpdGVtS2V5XSwgZnJvbUpTKHtcbiAgICAgICAgaXNEZWxldGVkOiB0cnVlLFxuICAgICAgICBtYXJrTW9kaWZpZWQ6IHRydWUsXG4gICAgICAgIGRlbGV0ZWRCeSxcbiAgICAgICAgZGVsZXRlZE9uLFxuICAgICAgfSkpO1xuICAgICAgQmxvY2tzLmZpbHRlcihpSXRlbSA9PiBpSXRlbS5nZXQoJ3N0YWNrSUQnKSA9PT0gaXRlbUtleSkuZm9yRWFjaCgoaUl0ZW0sIGtleSkgPT4ge1xuICAgICAgICBCbG9ja3MgPSBCbG9ja3MubWVyZ2VJbihba2V5XSwgZnJvbUpTKHtcbiAgICAgICAgICBpc0RlbGV0ZWQ6IHRydWUsXG4gICAgICAgICAgbWFya01vZGlmaWVkOiB0cnVlLFxuICAgICAgICAgIGRlbGV0ZWRCeSxcbiAgICAgICAgICBkZWxldGVkT24sXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgICAgT3BlcmF0b3JzLmZpbHRlcihpSXRlbSA9PiBpSXRlbS5nZXQoJ3N0YWNrSUQnKSA9PT0gaXRlbUtleSkuZm9yRWFjaCgoaUl0ZW0sIGtleSkgPT4ge1xuICAgICAgICBPcGVyYXRvcnMgPSBPcGVyYXRvcnMubWVyZ2VJbihba2V5XSwgZnJvbUpTKHtcbiAgICAgICAgICBpc0RlbGV0ZWQ6IHRydWUsXG4gICAgICAgICAgbWFya01vZGlmaWVkOiB0cnVlLFxuICAgICAgICAgIGRlbGV0ZWRCeSxcbiAgICAgICAgICBkZWxldGVkT24sXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGUuZ2V0SW4oWydncm91cHMnLCBpdGVtS2V5LCAnc2hhcmVkJ10pKSB7XG4gICAgICBCbG9ja3MuZmlsdGVyKGlJdGVtID0+IGlJdGVtLmdldCgncGFyZW50R3JvdXBJRCcpID09PSBpdGVtS2V5KS5mb3JFYWNoKChpSXRlbSwga2V5KSA9PiB7XG4gICAgICAgIEJsb2NrcyA9IEJsb2Nrcy5tZXJnZUluKFtrZXldLCBmcm9tSlMoe1xuICAgICAgICAgIGlzRGVsZXRlZDogdHJ1ZSxcbiAgICAgICAgICBtYXJrTW9kaWZpZWQ6IHRydWUsXG4gICAgICAgICAgZGVsZXRlZEJ5LFxuICAgICAgICAgIGRlbGV0ZWRPbixcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBUZW1wbGF0ZSA9IHRlbXBsYXRlLnVwZGF0ZSgnY29ubmVjdGlvbnMnLCAoY29ubmVjdGlvbnMpID0+IHtcbiAgICBpZiAoIWNvbm5lY3Rpb25zKSByZXR1cm4gZnJvbUpTKHt9KTtcbiAgICByZXR1cm4gY29ubmVjdGlvbnNcbiAgICAgIC5maWx0ZXIoKGNvbm5lY3Rpb24sIGtleSkgPT4gIShyZWplY3RDb25uZWN0aW9ucy5pbmNsdWRlcyhrZXkpKSlcbiAgICAgIC5tYXAoKGNvbm5lY3Rpb24sIGtleSkgPT4ge1xuICAgICAgICBsZXQgbmV3Q29ubmVjdGlvbiA9IGZyb21KUyh7fSk7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGNvbm5lY3Rpb24uZ2V0SW4oWydzb3VyY2UnLCAnaWQnXSk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGNvbm5lY3Rpb24uZ2V0SW4oWyd0YXJnZXQnLCAnaWQnXSk7XG4gICAgICAgIGxldCBzb3VyY2VCbG9ja0lEID0gc291cmNlLmdldCgnYmxvY2tfaWQnKTtcbiAgICAgICAgbGV0IHRhcmdldEJsb2NrSUQgPSB0YXJnZXQuZ2V0KCdibG9ja19pZCcpO1xuICAgICAgICBsZXQgc291cmNlVHlwZSA9IHRlbXBsYXRlLmdldEluKFsnYmxvY2tzJywgc291cmNlQmxvY2tJRCwgJ3R5cGUnXSkgPT09IFBhcGVyQ2hpbGRyZW5UeXBlcy5PUEVSQVRPUiA/IFBhcGVyQ2hpbGRyZW5UeXBlcy5PUEVSQVRPUiA6IFBhcGVyQ2hpbGRyZW5UeXBlcy5CTE9DSztcbiAgICAgICAgbGV0IHRhcmdldFR5cGUgPSB0ZW1wbGF0ZS5nZXRJbihbJ2Jsb2NrcycsIHRhcmdldEJsb2NrSUQsICd0eXBlJ10pID09PSBQYXBlckNoaWxkcmVuVHlwZXMuT1BFUkFUT1IgPyBQYXBlckNoaWxkcmVuVHlwZXMuT1BFUkFUT1IgOiBQYXBlckNoaWxkcmVuVHlwZXMuQkxPQ0s7XG4gICAgICAgIGNvbnN0IHNyY1BhcnQgPSB0ZW1wbGF0ZS5nZXRJbihbJ2Jsb2NrcycsIHNvdXJjZUJsb2NrSUQsICdvdXRwdXRzJywgc291cmNlLmdldCgnc2xvdF9pZCcpXSk7XG4gICAgICAgIGNvbnN0IHRhcmdldFBhcnQgPSB0ZW1wbGF0ZS5nZXRJbihbJ2Jsb2NrcycsIHRhcmdldEJsb2NrSUQsICdpbnB1dHMnLCB0YXJnZXQuZ2V0KCdzbG90X2lkJyldKTtcbiAgICAgICAgY29uc3QgZG9lc1JlamVjdEJsb2NrSURzSW5jbHVkZVNvdXJjZUJsb2NrSUQgPSByZWplY3RCbG9ja3Muc29tZShpSXRlbSA9PiBpSXRlbS5nZXQoJ2lkJykgPT09IHNvdXJjZUJsb2NrSUQpO1xuICAgICAgICBjb25zdCBkb2VzUmVqZWN0QmxvY2tJRHNJbmNsdWRlVGFyZ2V0QmxvY2tJRCA9IHJlamVjdEJsb2Nrcy5zb21lKGlJdGVtID0+IGlJdGVtLmdldCgnaWQnKSA9PT0gdGFyZ2V0QmxvY2tJRCk7XG5cbiAgICAgICAgaWYgKGRvZXNSZWplY3RCbG9ja0lEc0luY2x1ZGVTb3VyY2VCbG9ja0lEKSB7XG4gICAgICAgICAgY29uc3QgZ3JvdXBJRCA9IHJlamVjdEJsb2Nrcy5maW5kKGlJdGVtID0+IGlJdGVtLmdldCgnaWQnKSA9PT0gc291cmNlQmxvY2tJRCkuZ2V0KCdncm91cElEJyk7XG4gICAgICAgICAgc291cmNlQmxvY2tJRCA9IGdyb3VwSUQ7XG4gICAgICAgICAgaWYgKHRlbXBsYXRlLmdldEluKFsnZ3JvdXBzJywgZ3JvdXBJRCwgJ3NoYXJlZCddKSkge1xuICAgICAgICAgICAgc291cmNlQmxvY2tJRCA9IHNvdXJjZS5nZXQoJ3NoYXJlZF9ncm91cF9pZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzb3VyY2VUeXBlID0gUGFwZXJDaGlsZHJlblR5cGVzLkJMT0NLO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb2VzUmVqZWN0QmxvY2tJRHNJbmNsdWRlVGFyZ2V0QmxvY2tJRCkge1xuICAgICAgICAgIGNvbnN0IGdyb3VwSUQgPSByZWplY3RCbG9ja3MuZmluZChpSXRlbSA9PiBpSXRlbS5nZXQoJ2lkJykgPT09IHRhcmdldEJsb2NrSUQpLmdldCgnZ3JvdXBJRCcpO1xuICAgICAgICAgIHRhcmdldEJsb2NrSUQgPSBncm91cElEO1xuICAgICAgICAgIGlmICh0ZW1wbGF0ZS5nZXRJbihbJ2dyb3VwcycsIGdyb3VwSUQsICdzaGFyZWQnXSkpIHtcbiAgICAgICAgICAgIHRhcmdldEJsb2NrSUQgPSB0YXJnZXQuZ2V0KCdzaGFyZWRfZ3JvdXBfaWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGFyZ2V0VHlwZSA9IFBhcGVyQ2hpbGRyZW5UeXBlcy5CTE9DSztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzb3VyY2VUeXBlID09PSBQYXBlckNoaWxkcmVuVHlwZXMuQkxPQ0spIHtcbiAgICAgICAgICBCbG9ja3MgPSBCbG9ja3Muc2V0SW4oW3NvdXJjZUJsb2NrSUQsICdvdXRwdXRzJywgc291cmNlLmdldCgnc2xvdF9pZCcpLCAnY29ubmVjdGVkJ10sIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIE9wZXJhdG9ycyA9IE9wZXJhdG9ycy5zZXRJbihbc291cmNlQmxvY2tJRCwgJ291dHB1dHMnLCBzb3VyY2UuZ2V0KCdzbG90X2lkJyksICdjb25uZWN0ZWQnXSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0VHlwZSA9PT0gUGFwZXJDaGlsZHJlblR5cGVzLkJMT0NLKSB7XG4gICAgICAgICAgQmxvY2tzID0gQmxvY2tzLnNldEluKFt0YXJnZXRCbG9ja0lELCAnaW5wdXRzJywgdGFyZ2V0LmdldCgnc2xvdF9pZCcpLCAnY29ubmVjdGVkJ10sIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIE9wZXJhdG9ycyA9IE9wZXJhdG9ycy5zZXRJbihbdGFyZ2V0QmxvY2tJRCwgJ2lucHV0cycsIHRhcmdldC5nZXQoJ3Nsb3RfaWQnKSwgJ2Nvbm5lY3RlZCddLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld0Nvbm5lY3Rpb24gPSBuZXdDb25uZWN0aW9uLnNldCgnc291cmNlcycsIGZyb21KUyhbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6IHNvdXJjZUJsb2NrSUQsXG4gICAgICAgICAgICBwYXJ0OiBzcmNQYXJ0LnNldCgnaWQnLCBzb3VyY2UuZ2V0KCdzbG90X2lkJykpLFxuICAgICAgICAgICAgdHlwZTogc291cmNlVHlwZSxcbiAgICAgICAgICB9LFxuICAgICAgICBdKSk7XG4gICAgICAgIG5ld0Nvbm5lY3Rpb24gPSBuZXdDb25uZWN0aW9uLnNldCgndGFyZ2V0cycsIGZyb21KUyhbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6IHRhcmdldEJsb2NrSUQsXG4gICAgICAgICAgICBwYXJ0OiB0YXJnZXRQYXJ0LnNldCgnaWQnLCB0YXJnZXQuZ2V0KCdzbG90X2lkJykpLFxuICAgICAgICAgICAgdHlwZTogdGFyZ2V0VHlwZSxcbiAgICAgICAgICB9LFxuICAgICAgICBdKSk7XG4gICAgICAgIGNvbnN0IHNvdXJjZUJsb2NrRXJyb3JlZCA9IChzb3VyY2VUeXBlID09PSBQYXBlckNoaWxkcmVuVHlwZXMuQkxPQ0sgPyBCbG9ja3MgOiBPcGVyYXRvcnMpLmdldEluKFtzb3VyY2VCbG9ja0lELCAnbWFya01vZGlmaWVkJ10pO1xuICAgICAgICBjb25zdCB0YXJnZXRCbG9ja0Vycm9yZWQgPSAoc291cmNlVHlwZSA9PT0gUGFwZXJDaGlsZHJlblR5cGVzLkJMT0NLID8gQmxvY2tzIDogT3BlcmF0b3JzKS5nZXRJbihbdGFyZ2V0QmxvY2tJRCwgJ21hcmtNb2RpZmllZCddKTtcbiAgICAgICAgbmV3Q29ubmVjdGlvbiA9IG5ld0Nvbm5lY3Rpb24uc2V0KCdtYXJrTW9kaWZpZWQnLCBzb3VyY2VCbG9ja0Vycm9yZWQgfHwgdGFyZ2V0QmxvY2tFcnJvcmVkKTtcbiAgICAgICAgcmV0dXJuIG5ld0Nvbm5lY3Rpb24uc2V0KCdpZCcsIGtleSk7XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgRXJyb3JzID0gZnJvbUpTKFtdKS5jb25jYXQoRXJyb3JzLCAoVmFsaWRhdGlvbi5nZXRJbihbJ21vZGVsJywgJ2Vycm9yJ10pIHx8IGZyb21KUyhbXSkpKTtcbiAgKFZhbGlkYXRpb24uZ2V0SW4oWydibG9ja3MnXSkgfHwgZnJvbUpTKFtdKSkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIEVycm9ycyA9IEVycm9ycy5jb25jYXQoaXRlbS5nZXQoJ2Vycm9yJykpO1xuICB9KTtcbiAgKFZhbGlkYXRpb24uZ2V0SW4oWydjb25uZWN0aW9ucyddKSB8fCBmcm9tSlMoW10pKS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgRXJyb3JzID0gRXJyb3JzLmNvbmNhdChpdGVtLmdldCgnZXJyb3InKSk7XG4gIH0pO1xuICAoVmFsaWRhdGlvbi5nZXRJbihbJ2dyb3VwcyddKSB8fCBmcm9tSlMoW10pKS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgRXJyb3JzID0gRXJyb3JzLmNvbmNhdChpdGVtLmdldCgnZXJyb3InKSk7XG4gIH0pO1xuICAoVmFsaWRhdGlvbi5nZXRJbihbJ3N0YWNrcyddKSB8fCBmcm9tSlMoW10pKS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgRXJyb3JzID0gRXJyb3JzLmNvbmNhdChpdGVtLmdldCgnZXJyb3InKSk7XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgQmxvY2tzLFxuICAgIE9wZXJhdG9ycyxcbiAgICBTdGFja3MsXG4gICAgRXJyb3JzLFxuICAgIFZhbGlkYXRpb24sXG4gICAgaGFzRW50aXRpZXMsXG4gICAgVGVtcGxhdGUsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgSnNvbkVkaXRvckZvb3RlciA9ICh7IG9uRWRpdG9yUG9wdXBUb2dnbGUgfSkgPT4gKFxuICA8QnV0dG9uXG4gICAgb25DbGljaz17KCkgPT4gb25FZGl0b3JQb3B1cFRvZ2dsZShmYWxzZSl9XG4gID5cbiAgICBEb25lXG4gIDwvQnV0dG9uPlxuKTtcblxuSnNvbkVkaXRvckZvb3Rlci5wcm9wVHlwZXMgPSB7XG4gIG9uRWRpdG9yUG9wdXBUb2dnbGU6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuSnNvbkVkaXRvckZvb3Rlci5kZWZhdWx0UHJvcHMgPSB7XG4gIG9uRWRpdG9yUG9wdXBUb2dnbGU6IGYgPT4gZixcbn07XG5cbmV4cG9ydCBjb25zdCBleHRyYWN0RXJyb3JzID0gKF9pbnB1dHMgPSBmcm9tSlMoW10pKSA9PiBfaW5wdXRzLm1hcChpID0+IChpLmdldEluKFsnZXJyb3InXSkgfHwgZnJvbUpTKFtdKSkpXG4gIC52YWx1ZVNlcSgpXG4gIC5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gZnJvbUpTKFtdKVxuICAgIC5jb25jYXQoYWNjLCBpdGVtKSwgZnJvbUpTKFtdKSlcbiAgLnRvSlMoKTtcbmV4cG9ydCBjb25zdCBjaGVja0Vycm9yID0gaXRlbSA9PiBpdGVtLnNvbWUoaSA9PiAoaS5nZXRJbihbJ2Vycm9yJ10pIHx8IGZyb21KUyhbXSkpLnNpemUgPiAwKTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHNsb3RzRXJyb3JzIFt2YWxpZGF0aW9uIGVycm9yIGZvciBpbnB1dC9vdXRwdXQgXVxuICogQHBhcmFtIGJsb2NrIFsgYnVpbGRlcidzIGJsb2NrIHN0YXRlIGZvciB0aGF0IGJsb2NrIGlkXVxuICogQHJldHVybnMge3tvdXRwdXRIYXNFcnJvciA6IGJvb2xlYW4sIGlucHV0SGFzRXJyb3IgOiBib29sZWFufX1cbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrU2xvdHNFcnJvcnMgPSAoc2xvdHNFcnJvcnMsIGJsb2NrKSA9PiB7XG4gIGxldCBvdXRwdXRIYXNFcnJvciA9IGZhbHNlO1xuICBsZXQgaW5wdXRIYXNFcnJvciA9IGZhbHNlO1xuICAoc2xvdHNFcnJvcnMgfHwgZnJvbUpTKHt9KSkuc29tZSgoaXRlbSwga2V5KSA9PiB7XG4gICAgaWYgKCghb3V0cHV0SGFzRXJyb3IgfHwgIWlucHV0SGFzRXJyb3IpICYmIHNsb3RzRXJyb3JzLmdldEluKFtrZXksICdwYXJhbWV0ZXJzJ10pLnNpemUgPiAwKSB7XG4gICAgICBpZiAoYmxvY2suZ2V0SW4oWydvdXRwdXRzJywga2V5XSkpIHtcbiAgICAgICAgb3V0cHV0SGFzRXJyb3IgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICghaW5wdXRIYXNFcnJvcikge1xuICAgICAgICBpbnB1dEhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dEhhc0Vycm9yICYmIGlucHV0SGFzRXJyb3I7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIG91dHB1dEhhc0Vycm9yLFxuICAgIGlucHV0SGFzRXJyb3IsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SXRlbVkxID0gKGlucHV0Q291bnQsIG91dHB1dENvdW50LCB5MCkgPT4ge1xuICBjb25zdCBtYXhJT0NvdW50ID0gTWF0aC5tYXgoaW5wdXRDb3VudCwgb3V0cHV0Q291bnQpO1xuICByZXR1cm4geTAgKyAobWF4SU9Db3VudCA+IDIgPyBNYXRoLmNlaWwoKG1heElPQ291bnQgLSAyKSAvIDIpIDogMCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SXRlbVgxID0geCA9PiBNYXRoLmNlaWwoeCAvIEdyaWRTaXplLndpZHRoKTtcblxuZXhwb3J0IGNvbnN0IGdldEl0ZW1ZMCA9IHkgPT4gTWF0aC5jZWlsKHkgLyBHcmlkU2l6ZS5oZWlnaHQpO1xuXG5leHBvcnQgY29uc3QgZ2V0TmV3U2hhcmVkR3JvdXBCbG9ja1N0YXRlUmVkdWNlciA9ICh7XG4gIHN0YXRlUmVkdWNlcjogb2xkU3RhdGVSZWR1Y2VyLCBpZCxcbiAgcGFyZW50R3JvdXBJRCwgc2hhcmVEZXRhaWwsXG59KSA9PiB7XG4gIGxldCBzdGF0ZVJlZHVjZXIgPSBvbGRTdGF0ZVJlZHVjZXIuc2V0KCd1bnNhdmVkJywgdHJ1ZSk7XG4gIGNvbnN0IHNoYXJlRGV0YWlsS2V5cyA9IE9iamVjdC5rZXlzKHNoYXJlRGV0YWlsKTtcbiAgY29uc3QgbmV3SUQgPSBzaGFyZURldGFpbEtleXMuZmluZChpdGVtS2V5ID0+ICFzdGF0ZVJlZHVjZXIuZ2V0KCdibG9ja3MnKS5oYXMoaXRlbUtleSkpO1xuICBjb25zdCBvbGRQb3NpdGlvbiA9IHN0YXRlUmVkdWNlci5nZXRJbihbJ2Jsb2NrcycsIGlkLCAncG9zaXRpb24nXSk7XG4gIGNvbnN0IHggPSBvbGRQb3NpdGlvbi5nZXQoJ3gnKSArIDI1O1xuICBjb25zdCB5ID0gb2xkUG9zaXRpb24uZ2V0KCd5JykgKyAyNTtcbiAgY29uc3QgeTAgPSBnZXRJdGVtWTAoeSk7XG4gIGNvbnN0IG5ld1Bvc2l0aW9uID0ge1xuICAgIHgsXG4gICAgeSxcbiAgICB5MCxcbiAgICB4MTogZ2V0SXRlbVgxKHgpLFxuICAgIHkxOiBnZXRJdGVtWTEoc3RhdGVSZWR1Y2VyLmdldEluKFsnYmxvY2tzJywgaWQsICdpbnB1dHMnXSkuY291bnQoKSwgc3RhdGVSZWR1Y2VyLmdldEluKFsnYmxvY2tzJywgaWQsICdvdXRwdXRzJ10pLmNvdW50KCksIHkwKSxcbiAgfTtcbiAgc3RhdGVSZWR1Y2VyID0gc3RhdGVSZWR1Y2VyLnNldEluKFsnYmxvY2tzJywgbmV3SURdLFxuICAgIHN0YXRlUmVkdWNlci5nZXRJbihbJ2Jsb2NrcycsIGlkXSlcbiAgICAgIC5tZXJnZShmcm9tSlMoe1xuICAgICAgICBpZDogbmV3SUQsXG4gICAgICAgIHBvc2l0aW9uOiBuZXdQb3NpdGlvbixcbiAgICAgIH0pKVxuICAgICAgLnVwZGF0ZSgnaW5wdXRzJywgY3VycmVudElucHV0cyA9PiBjdXJyZW50SW5wdXRzLm1hcChpSW5wdXQgPT4gaUlucHV0LnNldCgnY29ubmVjdGVkJywgZmFsc2UpKSlcbiAgICAgIC51cGRhdGUoJ291dHB1dHMnLCBjdXJyZW50T3V0cHV0cyA9PiBjdXJyZW50T3V0cHV0cy5tYXAoaU91dHB1dCA9PiBpT3V0cHV0LnNldCgnY29ubmVjdGVkJywgZmFsc2UpKSkpO1xuICBzaGFyZURldGFpbEtleXMuZm9yRWFjaCgoaXRlbUtleSkgPT4ge1xuICAgIHN0YXRlUmVkdWNlciA9IHN0YXRlUmVkdWNlci5tZXJnZUluKFsnYmxvY2tzJywgaXRlbUtleV0sIGZyb21KUyh7XG4gICAgICBwYXJlbnRHcm91cElELFxuICAgICAgbmFtZTogc2hhcmVEZXRhaWxbaXRlbUtleV0ubmFtZSxcbiAgICAgIHNoYXJlc1dpdGg6IHNoYXJlRGV0YWlsW2l0ZW1LZXldLnNoYXJlc1dpdGgsXG4gICAgICBzaGFyZWQ6IHRydWUsXG4gICAgICBkZXNjcmlwdGlvbjogc3RhdGVSZWR1Y2VyLmdldEluKFsnYmxvY2tzJywgaWQsICdkZXNjcmlwdGlvbiddKSxcbiAgICAgIGNvbXBvbmVudF9pZDogc3RhdGVSZWR1Y2VyLmdldEluKFsnYmxvY2tzJywgaWQsICdjb21wb25lbnRfaWQnXSksXG4gICAgfSkpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBzdGF0ZVJlZHVjZXIsXG4gICAgbmV3SUQsXG4gICAgbmV3UG9zaXRpb24sXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TmV3U3RhY2tQb3NpdGlvbiA9IChzZWxlY3RlZENoaWxkKSA9PiB7XG4gIGlmICghc2VsZWN0ZWRDaGlsZC5jb3VudCgpKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IGl0ZW1zU29ydGVkQnlYMCA9IHNlbGVjdGVkQ2hpbGQuc29ydEJ5KGlJdGVtID0+IGlJdGVtLmdldEluKFsncG9zaXRpb24nLCAneDAnXSkpO1xuICBjb25zdCBtaW5YID0gaXRlbXNTb3J0ZWRCeVgwLmZpcnN0KCkuZ2V0SW4oWydwb3NpdGlvbicsICd4MCddKTtcbiAgY29uc3QgaXRlbXNTb3J0ZWRCeVgxID0gc2VsZWN0ZWRDaGlsZC5zb3J0QnkoaUl0ZW0gPT4gaUl0ZW0uZ2V0SW4oWydwb3NpdGlvbicsICd4MSddKSk7XG4gIGNvbnN0IG1heFggPSBpdGVtc1NvcnRlZEJ5WDEubGFzdCgpLmdldEluKFsncG9zaXRpb24nLCAneDEnXSk7XG4gIGNvbnN0IGl0ZW1zU29ydGVkQnlZMCA9IHNlbGVjdGVkQ2hpbGQuc29ydEJ5KGlJdGVtID0+IGlJdGVtLmdldEluKFsncG9zaXRpb24nLCAneTAnXSkpO1xuICBjb25zdCBtaW5ZID0gaXRlbXNTb3J0ZWRCeVkwLmZpcnN0KCkuZ2V0SW4oWydwb3NpdGlvbicsICd5MCddKTtcbiAgY29uc3QgaXRlbXNTb3J0ZWRCeVkxID0gc2VsZWN0ZWRDaGlsZC5zb3J0QnkoaUl0ZW0gPT4gaUl0ZW0uZ2V0SW4oWydwb3NpdGlvbicsICd5MSddKSk7XG4gIGNvbnN0IG1heFkgPSBpdGVtc1NvcnRlZEJ5WTEubGFzdCgpLmdldEluKFsncG9zaXRpb24nLCAneTEnXSk7XG4gIGNvbnN0IHggPSAobWluWCAtIDEpICogR3JpZFNpemUud2lkdGg7XG4gIGNvbnN0IHkgPSAobWluWSAtIDEpICogR3JpZFNpemUuaGVpZ2h0O1xuICBjb25zdCB3aWR0aCA9ICgobWF4WCAtIG1pblgpICsgMSkgKiBHcmlkU2l6ZS53aWR0aDtcbiAgY29uc3QgaGVpZ2h0ID0gKChtYXhZIC0gbWluWSkgKyAxKSAqIEdyaWRTaXplLmhlaWdodDtcblxuICByZXR1cm4geyB4LCB5LCB4MDogbWluWCwgeTA6IG1pblksIHgxOiBtYXhYLCB5MTogbWF4WSwgd2lkdGgsIGhlaWdodCB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldE5ld0dyb3VwUG9zaXRpb24gPSAoc2VsZWN0ZWRDaGlsZCkgPT4ge1xuICBpZiAoIXNlbGVjdGVkQ2hpbGQuY291bnQoKSkge1xuICAgIHJldHVybiB7IHBvc2l0aW9uOiB7fSB9O1xuICB9XG4gIGxldCBwb3NpdGlvbldpdGhNaW5YMCA9IHNlbGVjdGVkQ2hpbGQuZmlyc3QoKS5nZXQoJ3Bvc2l0aW9uJyk7XG4gIGxldCBwb3NpdGlvbldpdGhNaW5ZMCA9IHNlbGVjdGVkQ2hpbGQuZmlyc3QoKS5nZXQoJ3Bvc2l0aW9uJyk7XG4gIGxldCBtYXhZMSA9IDA7XG4gIGxldCBtYXhYMSA9IDA7XG4gIHNlbGVjdGVkQ2hpbGQuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgIG1heFkxID0gTWF0aC5tYXgobm9kZS5nZXRJbihbJ3Bvc2l0aW9uJywgJ3kxJ10pLCBtYXhZMSk7XG4gICAgbWF4WDEgPSBNYXRoLm1heChub2RlLmdldEluKFsncG9zaXRpb24nLCAneDEnXSksIG1heFgxKTtcbiAgICBpZiAobm9kZS5nZXRJbihbJ3Bvc2l0aW9uJywgJ3gwJ10pIDwgcG9zaXRpb25XaXRoTWluWDAuZ2V0KCd4MCcpKSB7XG4gICAgICBwb3NpdGlvbldpdGhNaW5YMCA9IG5vZGUuZ2V0KCdwb3NpdGlvbicpO1xuICAgIH1cbiAgICBpZiAobm9kZS5nZXRJbihbJ3Bvc2l0aW9uJywgJ3kwJ10pIDwgcG9zaXRpb25XaXRoTWluWTAuZ2V0KCd5MCcpKSB7XG4gICAgICBwb3NpdGlvbldpdGhNaW5ZMCA9IG5vZGUuZ2V0KCdwb3NpdGlvbicpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBzcGFuOiB7XG4gICAgICB4MDogcG9zaXRpb25XaXRoTWluWDAuZ2V0KCd4MCcpLFxuICAgICAgeTA6IHBvc2l0aW9uV2l0aE1pblkwLmdldCgneTAnKSxcbiAgICAgIHgxOiBtYXhYMSxcbiAgICAgIHkxOiBtYXhZMSxcbiAgICB9LFxuICAgIHBvc2l0aW9uOiB7XG4gICAgICB4MDogcG9zaXRpb25XaXRoTWluWDAuZ2V0KCd4MCcpLFxuICAgICAgeTA6IHBvc2l0aW9uV2l0aE1pblkwLmdldCgneTAnKSxcbiAgICAgIHgxOiBwb3NpdGlvbldpdGhNaW5YMC5nZXQoJ3gwJyksXG4gICAgICB4OiBwb3NpdGlvbldpdGhNaW5YMC5nZXQoJ3gnKSxcbiAgICAgIHk6IHBvc2l0aW9uV2l0aE1pblkwLmdldCgneScpLFxuICAgICAgd2lkdGg6IEdyaWRTaXplLndpZHRoLFxuICAgIH0sXG4gIH07XG4gIC8vXG4gIC8vIGlmICghc2VsZWN0ZWRDaGlsZC5jb3VudCgpKSB7XG4gIC8vICAgcmV0dXJuIHt9O1xuICAvLyB9XG4gIC8vIHJldHVybiBzZWxlY3RlZENoaWxkLnJlZHVjZSgocHJldiwgbmV4dCkgPT4ge1xuICAvLyAgIGlmICgobmV4dC5nZXRJbihbJ3Bvc2l0aW9uJywgJ3gxJ10pIDwgcHJldi5nZXRJbihbJ3Bvc2l0aW9uJywgJ3gxJ10pKSAmJiBuZXh0LmdldEluKFsncG9zaXRpb24nLCAneTAnXSkgPCBwcmV2LmdldEluKFsncG9zaXRpb24nLCAneTAnXSkpIHtcbiAgLy8gICAgIHJldHVybiBuZXh0O1xuICAvLyAgIH1cbiAgLy8gICByZXR1cm4gcHJldjtcbiAgLy8gfSwgc2VsZWN0ZWRDaGlsZC5maXJzdCgpKS5nZXQoJ3Bvc2l0aW9uJykudG9KUygpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldE1vdmVkU3RhY2tQb3NpdGlvbkFuZERlbHRhcyA9ICh7IG9sZFBvc2l0aW9uLCBuZXdQb3NpdGlvbiB9KSA9PiB7XG4gIGNvbnN0IG5ld1N0YWNrUG9zaXRpb24gPSB7XG4gICAgeDogTWF0aC5mbG9vcihuZXdQb3NpdGlvbi54IC8gR3JpZFNpemUud2lkdGgpICogR3JpZFNpemUud2lkdGgsXG4gICAgeTogTWF0aC5mbG9vcihuZXdQb3NpdGlvbi55IC8gR3JpZFNpemUuaGVpZ2h0KSAqIEdyaWRTaXplLmhlaWdodCxcbiAgICB3aWR0aDogb2xkUG9zaXRpb24ud2lkdGgsXG4gICAgaGVpZ2h0OiBvbGRQb3NpdGlvbi5oZWlnaHQsXG4gIH07XG5cbiAgbmV3U3RhY2tQb3NpdGlvbi55MCA9IGdldEl0ZW1ZMChuZXdTdGFja1Bvc2l0aW9uLnkpICsgMTtcbiAgbmV3U3RhY2tQb3NpdGlvbi54MCA9IGdldEl0ZW1YMShuZXdTdGFja1Bvc2l0aW9uLngpICsgMTtcbiAgbmV3U3RhY2tQb3NpdGlvbi54MSA9IG5ld1N0YWNrUG9zaXRpb24ueDAgKyAoKG5ld1N0YWNrUG9zaXRpb24ud2lkdGggLyBHcmlkU2l6ZS53aWR0aCkgLSAxKTtcbiAgbmV3U3RhY2tQb3NpdGlvbi55MSA9IG5ld1N0YWNrUG9zaXRpb24ueTAgKyAoKG5ld1N0YWNrUG9zaXRpb24uaGVpZ2h0IC8gR3JpZFNpemUuaGVpZ2h0KSAtIDEpO1xuXG4gIGNvbnN0IGR4ID0gbmV3U3RhY2tQb3NpdGlvbi54IC0gb2xkUG9zaXRpb24ueDtcbiAgY29uc3QgZHkgPSBuZXdTdGFja1Bvc2l0aW9uLnkgLSBvbGRQb3NpdGlvbi55O1xuICBjb25zdCBkeDEgPSBuZXdTdGFja1Bvc2l0aW9uLngxIC0gb2xkUG9zaXRpb24ueDE7XG4gIGNvbnN0IGR5MCA9IG5ld1N0YWNrUG9zaXRpb24ueTAgLSBvbGRQb3NpdGlvbi55MDtcbiAgY29uc3QgZHgwID0gbmV3U3RhY2tQb3NpdGlvbi54MCAtIG9sZFBvc2l0aW9uLngwO1xuICBjb25zdCBkeTEgPSBuZXdTdGFja1Bvc2l0aW9uLnkxIC0gb2xkUG9zaXRpb24ueTE7XG5cbiAgcmV0dXJuIHtcbiAgICBkeCxcbiAgICBkeSxcbiAgICBkeDEsXG4gICAgZHkwLFxuICAgIGR4MCxcbiAgICBkeTEsXG4gICAgbmV3U3RhY2tQb3NpdGlvbixcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRUcmFuc2Zvcm1lZElPQ2hpbGQgPSAoYWN0aXZlQ2hpbGQpID0+IHtcbiAgY29uc3QgSU9zID0gWydpbnB1dHMnLCAnb3V0cHV0cyddO1xuICBsZXQgbmV3QWN0aXZlQ2hpbGQgPSBmcm9tSlMoYWN0aXZlQ2hpbGQudG9KUygpKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IElPcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHR5cGUgPSBJT3NbaV07XG4gICAgY29uc3QgaW9PYmplY3QgPSBuZXdBY3RpdmVDaGlsZC5nZXQodHlwZSk7XG4gICAgaWYgKGlvT2JqZWN0KSB7XG4gICAgICBjb25zdCBuZXdJb09iamVjdCA9IGlvT2JqZWN0LnZhbHVlU2VxKClcbiAgICAgICAgLnJlZHVjZSgoYWNjLCBpb0l0ZW0pID0+IHtcbiAgICAgICAgICBpZiAoaW9JdGVtLmdldCgncmVwZWF0YWJsZScpKSB7XG4gICAgICAgICAgICBpZiAoIWlvSXRlbS5nZXQoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlcGVhdGFibGVJb3MgPSBpb0l0ZW0uZ2V0KCd2YWx1ZScpXG4gICAgICAgICAgICAgIC52YWx1ZVNlcSgpXG4gICAgICAgICAgICAgIC5yZWR1Y2UoKGlubmVyQWNjLCByZXBlYXRhYmxlSW9JdGVtKSA9PiBpbm5lckFjYy5zZXQocmVwZWF0YWJsZUlvSXRlbS5nZXQoJ2lkJyksIHJlcGVhdGFibGVJb0l0ZW0pLCBmcm9tSlMoe30pKTtcbiAgICAgICAgICAgIHJldHVybiBhY2MubWVyZ2UocmVwZWF0YWJsZUlvcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpb0l0ZW0uZ2V0KCdvcHRpb25hbCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW9JdGVtLmdldCgndmFsdWUnKSA/IGFjYy5zZXQoaW9JdGVtLmdldCgnaWQnKSwgaW9JdGVtKSA6IGFjYztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFjYy5zZXQoaW9JdGVtLmdldCgnaWQnKSwgaW9JdGVtKTtcbiAgICAgICAgfSwgZnJvbUpTKHt9KSk7XG4gICAgICBuZXdBY3RpdmVDaGlsZCA9IG5ld0FjdGl2ZUNoaWxkLnNldCh0eXBlLCBuZXdJb09iamVjdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdBY3RpdmVDaGlsZDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTaW5nbGVJT09uQWRkQ2hpbGQgPSAoeyBuZXh0LCBwYXJlbnRJbmRleCB9KSA9PiB7XG4gIGNvbnN0IGlkID0gZ2V0VXVJZCgpO1xuICBjb25zdCBvcmRlciA9IChwYXJlbnRJbmRleCArIDEpICogbWF4SW5wdXRzQW5kT3V0cHV0c1N1cHBvcnRlZE9yZGVyRm9yUmVwZWF0YWJsZTtcbiAgY29uc3QgbGFiZWwgPSBuZXh0LmdldCgnbGFiZWwnKTtcbiAgcmV0dXJuIHtcbiAgICBvcmRlcixcbiAgICBsYWJlbCxcbiAgICBpbnRlcm5hbF9uYW1lOiBuZXh0LmdldCgnaW50ZXJuYWxfbmFtZScpLFxuICAgIGlkLFxuICAgIHBhcmFtZXRlcnM6IHt9LFxuICAgIHVpX3BhcmFtOiB7XG4gICAgICBvcmRlcixcbiAgICAgIGxhYmVsLFxuICAgIH0sXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgaWRlbnRpZnlEdXBsaWNhdGVOYW1lcyA9IChpdGVtcyA9IFtdLCBrZXkgPSAnbmFtZScsIGlkS2V5ID0gJ2lkJykgPT4ge1xuICBjb25zdCBncm91cGVkID0gZ3JvdXBCeShpdGVtcywga2V5KTtcbiAgY29uc3QgZ3JvdXBlZEl0ZW1zID0gT2JqZWN0LmVudHJpZXMoZ3JvdXBlZCk7XG5cbiAgLy8gSWRlbnRpZnlpbmcgZHVwbGljYXRlIGtleXNcbiAgY29uc3QgZmlsdGVyZWRJdGVtcyA9IGdyb3VwZWRJdGVtc1xuICAgIC5maWx0ZXIoKFtrLCB2YWxdKSA9PiAhWycnLCBudWxsLCB1bmRlZmluZWRdLmluY2x1ZGVzKGspICYmIHZhbCAmJiB2YWwubGVuZ3RoID4gMSlcbiAgICAubWFwKChbXywgdmFsXSkgPT4gdmFsLm1hcChpID0+IGlbaWRLZXldKSk7XG4gIHJldHVybiB7XG4gICAgZHVwbGljYXRlczogW10uY29uY2F0LmFwcGx5KFtdLCBmaWx0ZXJlZEl0ZW1zKSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRWYWx1ZUZyb21CbHVlcHJpbnQgPSAoYmx1ZXByaW50KSA9PiB7XG4gIGlmIChibHVlcHJpbnQuZGVmYXVsdF92YWx1ZSAhPT0gdW5kZWZpbmVkICYmIGJsdWVwcmludC5kZWZhdWx0X3ZhbHVlICE9PSBudWxsKSB7XG4gICAgaWYgKGJsdWVwcmludC5wb3NzaWJsZV92YWx1ZXMpIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZU9iamVjdCA9IGJsdWVwcmludC5wb3NzaWJsZV92YWx1ZXNcbiAgICAgICAgLmZpbmQodmFsID0+IHZhbC5pbnRlcm5hbF9uYW1lID09PSBibHVlcHJpbnQuZGVmYXVsdF92YWx1ZSk7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gZ2V0KGRlZmF1bHRWYWx1ZU9iamVjdCwgJ3Byb3BlcnRpZXMnKTtcbiAgICAgIHJldHVybiAoe1xuICAgICAgICBpbnRlcm5hbF9uYW1lOiBibHVlcHJpbnQuZGVmYXVsdF92YWx1ZSxcbiAgICAgICAgcHJvcGVydGllczogcHJvcGVydGllcyA/IHByb3BlcnRpZXMucmVkdWNlKChhY2N1bSwgcHJvcCkgPT4gKHtcbiAgICAgICAgICAuLi5hY2N1bSxcbiAgICAgICAgICBbcHJvcC5pbnRlcm5hbF9uYW1lXTogZ2V0VmFsdWVGcm9tQmx1ZXByaW50KHByb3ApLFxuICAgICAgICB9KSwge30pIDogdW5kZWZpbmVkLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBibHVlcHJpbnQuZGVmYXVsdF92YWx1ZTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFZhbHVlRnJvbVJlcGVhdGFibGVCbHVlcHJpbnQgPSAoXG4gIGJsdWVwcmludCA9IHsgcG9zc2libGVfdmFsdWVzOiBudWxsLCBkZWZhdWx0X3ZhbHVlOiBudWxsIH0sXG4pID0+IHtcbiAgaWYgKGJsdWVwcmludC5kZWZhdWx0X3ZhbHVlICE9PSB1bmRlZmluZWQgJiYgYmx1ZXByaW50LmRlZmF1bHRfdmFsdWUgIT09IG51bGwpIHtcbiAgICBpZiAoYmx1ZXByaW50LnBvc3NpYmxlX3ZhbHVlcykge1xuICAgICAgY29uc3QgdmFsdWUgPSBibHVlcHJpbnQucG9zc2libGVfdmFsdWVzXG4gICAgICAgIC5maW5kKGl0ZW0gPT4gaXRlbS5pbnRlcm5hbF9uYW1lID09PSBibHVlcHJpbnQuZGVmYXVsdF92YWx1ZSk7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gZ2V0KHZhbHVlLCAncHJvcGVydGllcycpO1xuICAgICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi52YWx1ZSxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLm1hcChwcm9wID0+ICh7XG4gICAgICAgICAgICAuLi5wcm9wLFxuICAgICAgICAgICAgdmFsdWU6IGdldFZhbHVlRnJvbVJlcGVhdGFibGVCbHVlcHJpbnQocHJvcCksXG4gICAgICAgICAgfSksIHt9KSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGJsdWVwcmludC5kZWZhdWx0X3ZhbHVlO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5jb25zdCBnZXRWYWx1ZUZyb21SZXBlYXRhYmxlQmx1ZXByaW50T25BZGQgPSAoYmx1ZXByaW50KSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gYmx1ZXByaW50LnZhbHVlO1xuICBjb25zdCBkZWZhdWx0VmFsdWUgPSBibHVlcHJpbnQuZGVmYXVsdF92YWx1ZTtcbiAgY29uc3QgYlZhbHVlID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xuICBpZiAoYlZhbHVlICYmIGJWYWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IHByb3BlcnRpZXMgPSBiVmFsdWUudmFsdWUgJiYgYlZhbHVlLnZhbHVlLnByb3BlcnRpZXM7XG4gICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgIHByb3BlcnRpZXMgPSB0cmFuc2Zvcm1Qcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICAgIH1cbiAgICByZXR1cm4geyAuLi5iVmFsdWUsIHByb3BlcnRpZXMgfTtcbiAgfVxuICByZXR1cm4gYlZhbHVlO1xufTtcblxuY29uc3QgdHJhbnNmb3JtUHJvcGVydGllcyA9IChwcm9wZXJ0aWVzKSA9PiB7XG4gIGNvbnN0IGlzQXJyYXkgPSBwcm9wZXJ0aWVzIGluc3RhbmNlb2YgQXJyYXk7XG4gIGlmIChpc0FycmF5KSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocHJvcGVydGllcykucmVkdWNlKChhY2N1bSwgcHJvcCkgPT4gKHtcbiAgICAgIC4uLmFjY3VtLFxuICAgICAgW3Byb3AuaW50ZXJuYWxfbmFtZV06IHtcbiAgICAgICAgLi4ucHJvcCxcbiAgICAgICAgdmFsdWU6IGdldFZhbHVlRnJvbVJlcGVhdGFibGVCbHVlcHJpbnRPbkFkZChwcm9wKSxcbiAgICAgIH0sXG4gICAgfSksIHt9KTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcGVydGllcykucmVkdWNlKChhY2N1bSwgcHJvcCkgPT4gKHtcbiAgICAuLi5hY2N1bSxcbiAgICBbcHJvcF06IHtcbiAgICAgIC4uLnByb3BlcnRpZXNbcHJvcF0sXG4gICAgICB2YWx1ZTogZ2V0VmFsdWVGcm9tUmVwZWF0YWJsZUJsdWVwcmludE9uQWRkKHByb3BlcnRpZXNbcHJvcF0pLFxuICAgIH0sXG4gIH0pLCB7fSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VmFsdWVGcm9tUmVwZWF0YWJsZUJsdWVwcmludE9uTG9hZCA9IChwYXJhbWV0ZXJUcmFuc2Zvcm1lZCwgY1ZhbCwgaW50ZXJuYWxOYW1lKSA9PiB7XG4gIGxldCB2YWx1ZTtcbiAgaWYgKHBhcmFtZXRlclRyYW5zZm9ybWVkKSB2YWx1ZSA9IGNWYWwudmFsdWUgJiYgY1ZhbC52YWx1ZVtpbnRlcm5hbE5hbWVdO1xuICBlbHNlIHZhbHVlID0gY1ZhbFtpbnRlcm5hbE5hbWVdO1xuICBsZXQgcHJvcGVydGllcyA9IGdldCh2YWx1ZSwgWyd2YWx1ZScsICdwcm9wZXJ0aWVzJ10pO1xuICBpZiAocHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMgPSB0cmFuc2Zvcm1Qcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICAgIHZhbHVlID0gc2V0KHZhbHVlLCBbJ3ZhbHVlJywgJ3Byb3BlcnRpZXMnXSwgcHJvcGVydGllcyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZU5ld1JlcGVhdGFibGVLZXkgPSBjdXJyZW50S2V5cyA9PiAoXG4gIGN1cnJlbnRLZXlzLmxlbmd0aCA/IE1hdGgubWF4KC4uLmN1cnJlbnRLZXlzKSArIDEgOiAxXG4pLnRvU3RyaW5nKCk7XG5cbmNvbnN0IGdldFZhbHVlID0gKHByb3BlcnR5LCB2YWx1ZSkgPT4ge1xuICBzd2l0Y2ggKHByb3BlcnR5LmRhdGFfdHlwZSkge1xuICAgIGNhc2UgREFUQV9UWVBFUy5GTE9BVDpcbiAgICBjYXNlIERBVEFfVFlQRVMuSU5URUdFUjpcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSA/ICt2YWx1ZSA6IG51bGw7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB2YWx1ZSB8fCBudWxsO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UHJvcGVydHkgPSAocHJvcGVydHksIGRhdGFQYXJhbSwgcmVkdWNlclBhdGgsIHRyYW5zZm9ybWVkKSA9PiB7XG4gIGxldCBkYXRhID0gZGF0YVBhcmFtO1xuICBpZiAoZGF0YVBhcmFtICYmIHRyYW5zZm9ybWVkICYmIHR5cGVvZiBkYXRhUGFyYW0gPT09ICdvYmplY3QnKSB7XG4gICAgZGF0YSA9IGRhdGFQYXJhbS52YWx1ZTtcbiAgfVxuXG4gIGlmIChwcm9wZXJ0eS5yZW5kZXJfdHlwZSA9PT0gUkVOREVSX1RZUEVTLk1PREVMX09QVElNSVpFUl9TQ09QRSB8fCBwcm9wZXJ0eS5yZW5kZXJfdHlwZSA9PT0gUkVOREVSX1RZUEVTLk1BVFJJWCB8fCAocHJvcGVydHkucmVuZGVyX3R5cGUudHlwZSAmJiBwcm9wZXJ0eS5yZW5kZXJfdHlwZS50eXBlLmluY2x1ZGVzKCdUQUJMRScpKSkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5wcm9wZXJ0eSxcbiAgICAgIHJlZHVjZXJQYXRoLFxuICAgICAgdmFsdWU6IGRhdGEgfHwgW10sXG4gICAgfTtcbiAgfVxuICBpZiAocHJvcGVydHkucmVuZGVyX3R5cGUgPT09IFJFTkRFUl9UWVBFUy5URVhUIHx8IHByb3BlcnR5LnJlbmRlcl90eXBlID09PSBSRU5ERVJfVFlQRVMuQ0hFQ0tCT1gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucHJvcGVydHksXG4gICAgICByZWR1Y2VyUGF0aCxcbiAgICAgIHZhbHVlOiBnZXRWYWx1ZShwcm9wZXJ0eSwgZGF0YSksXG4gICAgfTtcbiAgfVxuICBpZiAocHJvcGVydHkucmVuZGVyX3R5cGUgPT09IFJFTkRFUl9UWVBFUy5EUk9QRE9XTikge1xuICAgIGxldCBzZWxlY3RlZE9iamVjdDtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgc2VsZWN0ZWRPYmplY3QgPSBwcm9wZXJ0eS5wb3NzaWJsZV92YWx1ZXMuZmluZChcbiAgICAgICAgcG9zc2libGVWYWx1ZSA9PiBwb3NzaWJsZVZhbHVlLmludGVybmFsX25hbWUgPT09IGRhdGEuaW50ZXJuYWxfbmFtZSk7XG4gICAgfVxuICAgIGlmIChzZWxlY3RlZE9iamVjdCAmJiAoc2VsZWN0ZWRPYmplY3QuZGF0YV90eXBlICE9PSBEQVRBX1RZUEVTLkNPTVBMRVgpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wcm9wZXJ0eSxcbiAgICAgICAgdmFsdWU6IHNlbGVjdGVkT2JqZWN0LFxuICAgICAgICByZWR1Y2VyUGF0aCxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCBwcm9wZXJ0aWVzID0gc2VsZWN0ZWRPYmplY3QgJiYgc2VsZWN0ZWRPYmplY3QucHJvcGVydGllcztcbiAgICBpZiAocHJvcGVydGllcykge1xuICAgICAgcHJvcGVydGllcyA9IHByb3BlcnRpZXMucmVkdWNlKChhY2MsIGlubmVyUHJvcGVydHkpID0+IHtcbiAgICAgICAgbGV0IGlubmVyUHJvcGVydHlEYXRhO1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICBpZiAoZGF0YS5wcm9wZXJ0aWVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlubmVyUHJvcCA9IGRhdGEucHJvcGVydGllcy5maW5kKHByb3AgPT4gcHJvcC5pbnRlcm5hbF9uYW1lID09PSBpbm5lclByb3BlcnR5LmludGVybmFsX25hbWUpO1xuICAgICAgICAgICAgaW5uZXJQcm9wZXJ0eURhdGEgPSBpbm5lclByb3AudmFsdWU7XG4gICAgICAgICAgfSBlbHNlIGlubmVyUHJvcGVydHlEYXRhID0gZGF0YS5wcm9wZXJ0aWVzW2lubmVyUHJvcGVydHkuaW50ZXJuYWxfbmFtZV07XG4gICAgICAgICAgLy8gaWYgKHByb3BlcnR5LnBhcmFtZXRlcnNfdHJhbnNmb3JtZWQpIGlubmVyUHJvcGVydHlEYXRhID0gaW5uZXJQcm9wZXJ0eURhdGEudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5hY2MsXG4gICAgICAgICAgW2lubmVyUHJvcGVydHkuaW50ZXJuYWxfbmFtZV06IGdldFByb3BlcnR5KGlubmVyUHJvcGVydHksIGlubmVyUHJvcGVydHlEYXRhLCByZWR1Y2VyUGF0aC5jb25jYXQoWyd2YWx1ZScsICdwcm9wZXJ0aWVzJywgaW5uZXJQcm9wZXJ0eS5pbnRlcm5hbF9uYW1lXSksIHRyYW5zZm9ybWVkKSxcbiAgICAgICAgfTtcbiAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnByb3BlcnR5LFxuICAgICAgcmVkdWNlclBhdGgsXG4gICAgICB2YWx1ZToge1xuICAgICAgICAuLi5zZWxlY3RlZE9iamVjdCxcbiAgICAgICAgcHJvcGVydGllcyxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICBpZiAocHJvcGVydHkucmVuZGVyX3R5cGUgPT09IFJFTkRFUl9UWVBFUy5KU09OKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnByb3BlcnR5LFxuICAgICAgcmVkdWNlclBhdGgsXG4gICAgICB2YWx1ZTogZGF0YSB8fCB7fSxcbiAgICAgIHVuaXF1ZUlERm9yVmFsdWU6IHByb3BlcnR5LnVuaXF1ZUlERm9yVmFsdWUgfHwgZ2V0U2hvcnRJZCgpLFxuICAgIH07XG4gIH1cblxuICBpZiAocHJvcGVydHkucmVuZGVyX3R5cGUgPT09IFJFTkRFUl9UWVBFUy5CQl9UUkFOU0ZFUl9XRUlHSFRTKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnByb3BlcnR5LFxuICAgICAgcmVkdWNlclBhdGgsXG4gICAgICB2YWx1ZTogZGF0YSxcbiAgICB9O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./apps/Model/src/pages/ModelPage/pages/ModelDesigner/ModelDesigner.utils.js\n");

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMi41NWU4MDMzOTc3ZWMwYjliYjY2Yi5jaHVuay5qcyIsInNvdXJjZVJvb3QiOiIifQ==